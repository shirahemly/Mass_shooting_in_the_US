{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Republican States in the US Suffer More from Mass Shooting - True or False?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is mass shooting?\n",
    "\n",
    "Although there is no broadly accepted definition for 'mass shooting' in the US, many have tried to define it. \n",
    "most definitions are similar, with the main difference being the minimal number of victims (injured or killed). The minimal number of victims vary from 3 to 5 victims for an act of shooting with no cooling-off period.\n",
    "\n",
    "In 2013, the Congress had defined \"Mass killing\" as being murder of three or more people.\n",
    "\n",
    "\n",
    "In this project, \"Mass shooting\" will refer to an act of firearm violence, in which a gunman injures or kills at least three victims.\n",
    "\n",
    "\n",
    "The United States has had more mass shootings than any other country.\n",
    "\n",
    "In fact, one study found that nearly one-third of the world's mass shootings between 1966 and 2012 (90 of 292 incidents) occurred in the United States.\n",
    "\n",
    "I would like to find out whether \"Republican states\" in the US suffer more from mass shooting than \"Democratic states\". \n",
    "One question arise immediately when thinking about it - How would you define a \"Republican\" or a \"Democratic state\"?\n",
    "\n",
    "Keep reading to find out."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sqlite3\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('max_columns', 180)\n",
    "pd.set_option('max_rows', 200000)\n",
    "pd.set_option('max_colwidth', 5000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import data\n",
    "\n",
    "mass_shootings = pd.read_csv('/Users/shiralavi/Desktop/data_analysis/Projects/DBs/us-mass-shootings-last-50-years/mass_shootings_dataset_ver 5.csv', encoding = \"ISO-8859-1\", parse_dates=[\"Date\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S#</th>\n",
       "      <th>Title</th>\n",
       "      <th>Location</th>\n",
       "      <th>Date</th>\n",
       "      <th>Incident Area</th>\n",
       "      <th>Open/Close Location</th>\n",
       "      <th>Target</th>\n",
       "      <th>Cause</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>Injured</th>\n",
       "      <th>Total victims</th>\n",
       "      <th>Policeman Killed</th>\n",
       "      <th>Age</th>\n",
       "      <th>Employeed (Y/N)</th>\n",
       "      <th>Employed at</th>\n",
       "      <th>Mental Health Issues</th>\n",
       "      <th>Race</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Texas church mass shooting</td>\n",
       "      <td>Sutherland Springs, TX</td>\n",
       "      <td>2017-11-05</td>\n",
       "      <td>Church</td>\n",
       "      <td>Close</td>\n",
       "      <td>random</td>\n",
       "      <td>unknown</td>\n",
       "      <td>Devin Patrick Kelley, 26, an ex-air force officer, shot and killed 26 people and wounded 20 at a church in Texas. He was found dead later in his vehicle.</td>\n",
       "      <td>26</td>\n",
       "      <td>20</td>\n",
       "      <td>46</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>White</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Walmart shooting in suburban Denver</td>\n",
       "      <td>Thornton, CO</td>\n",
       "      <td>2017-11-01</td>\n",
       "      <td>Wal-Mart</td>\n",
       "      <td>Open</td>\n",
       "      <td>random</td>\n",
       "      <td>unknown</td>\n",
       "      <td>Scott Allen Ostrem, 47, walked into a Walmart in a suburb north of Denver and fatally shot two men and a woman, then left the store and drove away. After an all-night manhunt, Ostrem, who had financial problems but no serious criminal history, was captured by police after being spotted near his apartment in Denver.</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>White</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Edgewood businees park shooting</td>\n",
       "      <td>Edgewood, MD</td>\n",
       "      <td>2017-10-18</td>\n",
       "      <td>Remodeling Store</td>\n",
       "      <td>Close</td>\n",
       "      <td>coworkers</td>\n",
       "      <td>unknown</td>\n",
       "      <td>Radee Labeeb Prince, 37, fatally shot three people and wounded two others around 9am at Advance Granite Solutions, a home remodeling business where he worked near Baltimore. Hours later he shot and wounded a sixth person at a car dealership in Wilmington, Delaware. He was apprehended that evening following a manhunt by authorities.</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Advance Granite Store</td>\n",
       "      <td>No</td>\n",
       "      <td>Black</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   S#                                Title                Location       Date  \\\n",
       "0   1           Texas church mass shooting  Sutherland Springs, TX 2017-11-05   \n",
       "1   2  Walmart shooting in suburban Denver            Thornton, CO 2017-11-01   \n",
       "2   3      Edgewood businees park shooting            Edgewood, MD 2017-10-18   \n",
       "\n",
       "      Incident Area Open/Close Location     Target    Cause  \\\n",
       "0            Church               Close     random  unknown   \n",
       "1          Wal-Mart                Open     random  unknown   \n",
       "2  Remodeling Store               Close  coworkers  unknown   \n",
       "\n",
       "                                                                                                                                                                                                                                                                                                                                         Summary  \\\n",
       "0                                                                                                                                                                                     Devin Patrick Kelley, 26, an ex-air force officer, shot and killed 26 people and wounded 20 at a church in Texas. He was found dead later in his vehicle.    \n",
       "1                   Scott Allen Ostrem, 47, walked into a Walmart in a suburb north of Denver and fatally shot two men and a woman, then left the store and drove away. After an all-night manhunt, Ostrem, who had financial problems but no serious criminal history, was captured by police after being spotted near his apartment in Denver.   \n",
       "2  Radee Labeeb Prince, 37, fatally shot three people and wounded two others around 9am at Advance Granite Solutions, a home remodeling business where he worked near Baltimore. Hours later he shot and wounded a sixth person at a car dealership in Wilmington, Delaware. He was apprehended that evening following a manhunt by authorities.   \n",
       "\n",
       "   Fatalities  Injured  Total victims  Policeman Killed Age  Employeed (Y/N)  \\\n",
       "0          26       20             46               0.0  26              NaN   \n",
       "1           3        0              3               0.0  47              NaN   \n",
       "2           3        3              6               0.0  37              NaN   \n",
       "\n",
       "             Employed at Mental Health Issues   Race Gender  Latitude  \\\n",
       "0                    NaN                   No  White      M       NaN   \n",
       "1                    NaN                   No  White      M       NaN   \n",
       "2  Advance Granite Store                   No  Black      M       NaN   \n",
       "\n",
       "   Longitude  \n",
       "0        NaN  \n",
       "1        NaN  \n",
       "2        NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass_shootings.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S#                               int64\n",
       "Title                           object\n",
       "Location                        object\n",
       "Date                    datetime64[ns]\n",
       "Incident Area                   object\n",
       "Open/Close Location             object\n",
       "Target                          object\n",
       "Cause                           object\n",
       "Summary                         object\n",
       "Fatalities                       int64\n",
       "Injured                          int64\n",
       "Total victims                    int64\n",
       "Policeman Killed               float64\n",
       "Age                             object\n",
       "Employeed (Y/N)                float64\n",
       "Employed at                     object\n",
       "Mental Health Issues            object\n",
       "Race                            object\n",
       "Gender                          object\n",
       "Latitude                       float64\n",
       "Longitude                      float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass_shootings.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S#                        0\n",
       "Title                     0\n",
       "Location                 45\n",
       "Date                      0\n",
       "Incident Area            62\n",
       "Open/Close Location      28\n",
       "Target                    5\n",
       "Cause                    77\n",
       "Summary                   0\n",
       "Fatalities                0\n",
       "Injured                   0\n",
       "Total victims             0\n",
       "Policeman Killed          6\n",
       "Age                     144\n",
       "Employeed (Y/N)         256\n",
       "Employed at             282\n",
       "Mental Health Issues      0\n",
       "Race                      2\n",
       "Gender                    0\n",
       "Latitude                 20\n",
       "Longitude                20\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass_shootings.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15   2016-04-26\n",
       "16   2016-04-24\n",
       "17   2016-04-21\n",
       "18   2016-04-19\n",
       "19   2016-04-19\n",
       "20   2016-04-19\n",
       "21   2016-04-18\n",
       "22   2016-04-09\n",
       "23   2016-04-09\n",
       "24   2016-04-07\n",
       "25   2016-04-01\n",
       "29   2016-03-25\n",
       "34   2016-03-15\n",
       "35   2016-03-13\n",
       "36   2016-03-12\n",
       "37   2016-03-11\n",
       "38   2016-03-11\n",
       "40   2016-03-09\n",
       "42   2016-03-07\n",
       "43   2016-03-07\n",
       "45   2016-03-06\n",
       "46   2016-03-05\n",
       "47   2016-02-28\n",
       "48   2016-02-28\n",
       "53   2016-02-25\n",
       "55   2016-02-21\n",
       "56   2016-02-21\n",
       "59   2016-02-20\n",
       "60   2016-02-20\n",
       "61   2016-02-19\n",
       "62   2016-02-09\n",
       "64   2016-02-07\n",
       "65   2016-02-06\n",
       "66   2016-02-06\n",
       "67   2016-02-06\n",
       "68   2016-01-31\n",
       "69   2016-01-30\n",
       "70   2016-01-29\n",
       "72   2016-01-25\n",
       "73   2016-01-23\n",
       "74   2016-01-23\n",
       "75   2016-01-17\n",
       "76   2016-01-11\n",
       "77   2016-01-07\n",
       "78   2016-01-06\n",
       "Name: Date, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# mass_shootings - checking all 45 null in 'Location' column\n",
    "\n",
    "mass_shootings[mass_shootings['Location'].isna()]['Date']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# all null 'Location's are attacks from 2016. \n",
    "# I will later delete 2016 from this table based on a 'year' column I will create and use a \n",
    "# different db to fill the missing information\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing mass_shooting_usa_XXXX files - shooting incidents from 2016 - 2019\n",
    "\n",
    "inc_2016 = pd.read_csv('/Users/shiralavi/Desktop/data_analysis/Projects/DBs/mass_shooting/mass_shooting_usa_2016.csv')\n",
    "inc_2017 = pd.read_csv('/Users/shiralavi/Desktop/data_analysis/Projects/DBs/mass_shooting/mass_shooting_usa_2017.csv')\n",
    "inc_2018 = pd.read_csv('/Users/shiralavi/Desktop/data_analysis/Projects/DBs/mass_shooting/mass_shooting_usa_2018.csv')\n",
    "inc_2019 = pd.read_csv('/Users/shiralavi/Desktop/data_analysis/Projects/DBs/mass_shooting/mass_shooting_usa_2019.csv')\n",
    "\n",
    "frames = [inc_2016, inc_2017, inc_2018, inc_2019]\n",
    "inc_2016_2019 = pd.concat(frames)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# inc_2016_2019 change column names\n",
    "\n",
    "inc_2016_2019.columns = ['Date', 'State', 'City', 'Address', 'Fatalities', 'Injured', 'Operations']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1119, 7)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>State</th>\n",
       "      <th>City</th>\n",
       "      <th>Address</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>Injured</th>\n",
       "      <th>Operations</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>Georgia</td>\n",
       "      <td>Lenox (El Dorado)</td>\n",
       "      <td>27 Briarwood Ct</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>Texas</td>\n",
       "      <td>Houston</td>\n",
       "      <td>3704 Fannin Street</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-12-30</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>Mansfield</td>\n",
       "      <td>3230 Possum Run Rd</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-12-30</td>\n",
       "      <td>Connecticut</td>\n",
       "      <td>Wallingford</td>\n",
       "      <td>95 S Turnpike Rd</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-12-28</td>\n",
       "      <td>Georgia</td>\n",
       "      <td>Columbus</td>\n",
       "      <td>2914 10th Street</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date        State               City             Address  Fatalities  \\\n",
       "0 2016-12-31      Georgia  Lenox (El Dorado)     27 Briarwood Ct           2   \n",
       "1 2016-12-31        Texas            Houston  3704 Fannin Street           1   \n",
       "2 2016-12-30         Ohio          Mansfield  3230 Possum Run Rd           0   \n",
       "3 2016-12-30  Connecticut        Wallingford    95 S Turnpike Rd           2   \n",
       "4 2016-12-28      Georgia           Columbus    2914 10th Street           1   \n",
       "\n",
       "   Injured  Operations  \n",
       "0        2         NaN  \n",
       "1        3         NaN  \n",
       "2        5         NaN  \n",
       "3        3         NaN  \n",
       "4        4         NaN  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# inc_2016_2019 converting date to desired date format\n",
    "\n",
    "inc_2016_2019['Date'] = pd.to_datetime(inc_2016_2019.Date)\n",
    "\n",
    "print(inc_2016_2019.shape)\n",
    "inc_2016_2019.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Information about the files : \n",
      "\n",
      "The db \"mass_shootings_dataset_ver 5\" contain information about mass shooting incidents \n",
      "in the USA in the last 50 years. (Up to 2017)\n",
      "\n",
      "Number of columns -  21\n",
      "Number of incidents -  323\n",
      "\n",
      "The 4 files \"mass_shooting_usa_2016/7/8/9\" contain information about mass shooting incidents \n",
      "in the USA in the years 2016, 2017, 2018, 2019.\n",
      "\n",
      "All four files are now combined to one - \"inc_2016_2019\"\n",
      "Number of columns -  7\n",
      "Number of incidents -  1119\n"
     ]
    }
   ],
   "source": [
    "print('Information about the files : ')\n",
    "print()\n",
    "print('The db \"mass_shootings_dataset_ver 5\" contain information about mass shooting incidents \\nin the USA in the last 50 years. (Up to 2017)')\n",
    "print()\n",
    "print('Number of columns - ', mass_shootings.shape[1])\n",
    "print('Number of incidents - ', mass_shootings.shape[0])\n",
    "print()\n",
    "print('The 4 files \"mass_shooting_usa_2016/7/8/9\" contain information about mass shooting incidents \\nin the USA in the years 2016, 2017, 2018, 2019.')\n",
    "print()\n",
    "print('All four files are now combined to one - \"inc_2016_2019\"')\n",
    "\n",
    "\n",
    "print('Number of columns - ', inc_2016_2019.shape[1])\n",
    "print('Number of incidents - ', inc_2016_2019.shape[0])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create 'year' column for both tables\n",
    "\n",
    "mass_shootings['year'] = mass_shootings['Date'].dt.year\n",
    "inc_2016_2019['year'] = inc_2016_2019['Date'].dt.year\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mass_shootings table - drop year 2017 and 2016 to avoid duplicates\n",
    "\n",
    "mass_shootings = mass_shootings[mass_shootings['year'] < 2016]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S#</th>\n",
       "      <th>Title</th>\n",
       "      <th>Location</th>\n",
       "      <th>Date</th>\n",
       "      <th>Incident Area</th>\n",
       "      <th>Open/Close Location</th>\n",
       "      <th>Target</th>\n",
       "      <th>Cause</th>\n",
       "      <th>Summary</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>Injured</th>\n",
       "      <th>Total victims</th>\n",
       "      <th>Policeman Killed</th>\n",
       "      <th>Age</th>\n",
       "      <th>Employeed (Y/N)</th>\n",
       "      <th>Employed at</th>\n",
       "      <th>Mental Health Issues</th>\n",
       "      <th>Race</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [S#, Title, Location, Date, Incident Area, Open/Close Location, Target, Cause, Summary, Fatalities, Injured, Total victims, Policeman Killed, Age, Employeed (Y/N), Employed at, Mental Health Issues, Race, Gender, Latitude, Longitude, year]\n",
       "Index: []"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check\n",
    "\n",
    "mass_shootings[mass_shootings['year'] > 2015]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mass_shootings table - create 'city' column\n",
    "\n",
    "mass_shootings['city'] = mass_shootings['Location'].str.rsplit(',', 1).str[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mass_shootings table - create 'state' column\n",
    "\n",
    "mass_shootings['state'] = mass_shootings['Location'].str.rsplit(',', 1).str[-1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mass_shootings table - correcting state column\n",
    "\n",
    "state_codes = {\n",
    "    'CA' : 'California',\n",
    "    'PA': 'Pennsylvania',\n",
    "    'MD' : 'Maryland',\n",
    "    'NV' : 'Nevada',\n",
    "    'WA' : 'Washington',\n",
    "    'LA' : 'Louisiana',\n",
    "    'CO' : 'Colorado',\n",
    "    'TX' : 'Texas',\n",
    "    'Washington D.C.' : 'Washington'\n",
    "}\n",
    "\n",
    "\n",
    "for key, value in state_codes.items():\n",
    "    mass_shootings['state'] = mass_shootings['state'].str.replace(key, value)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "California       29\n",
       "Florida          15\n",
       "Texas            15\n",
       "Washington       14\n",
       "Georgia          13\n",
       "NewYork          10\n",
       "NorthCarolina    10\n",
       "Arizona          10\n",
       "Wisconsin         9\n",
       "Illinois          9\n",
       "Ohio              9\n",
       "Alabama           8\n",
       "Pennsylvania      7\n",
       "Colorado          6\n",
       "SouthCarolina     5\n",
       "Michigan          5\n",
       "Oklahoma          5\n",
       "Nevada            5\n",
       "Tennessee         4\n",
       "Oregon            4\n",
       "Minnesota         4\n",
       "Louisiana         4\n",
       "Kentucky          4\n",
       "Virginia          3\n",
       "NewMexico         3\n",
       "Mississippi       3\n",
       "Connecticut       3\n",
       "NewJersey         3\n",
       "Massachusetts     3\n",
       "Nebraska          3\n",
       "Montana           2\n",
       "Arkansas          2\n",
       "Missouri          2\n",
       "Utah              2\n",
       "Kansas            1\n",
       "Idaho             1\n",
       "Alaska            1\n",
       "WestVirginia      1\n",
       "SouthDakota       1\n",
       "Indiana           1\n",
       "Iowa              1\n",
       "Wyoming           1\n",
       "Hawaii            1\n",
       "Maine             1\n",
       "Vermont           1\n",
       "Name: state, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass_shootings['state'] = mass_shootings['state'].str.replace(' ', '')\n",
    "mass_shootings['state'].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "California            124\n",
       "Illinois              117\n",
       "Florida                90\n",
       "Texas                  75\n",
       "Pennsylvania           46\n",
       "Tennessee              45\n",
       "Louisiana              44\n",
       "Ohio                   43\n",
       "NewYork                42\n",
       "Alabama                38\n",
       "Georgia                36\n",
       "Missouri               34\n",
       "NewJersey              33\n",
       "Maryland               29\n",
       "Virginia               29\n",
       "Michigan               27\n",
       "NorthCarolina          27\n",
       "Indiana                25\n",
       "Mississippi            23\n",
       "SouthCarolina          18\n",
       "DistrictofColumbia     17\n",
       "Arkansas               15\n",
       "Washington             14\n",
       "Colorado               14\n",
       "Kentucky               14\n",
       "Arizona                13\n",
       "Minnesota              12\n",
       "Kansas                 11\n",
       "Connecticut            10\n",
       "Nevada                  9\n",
       "NewMexico               9\n",
       "Wisconsin               8\n",
       "Oklahoma                7\n",
       "Massachusetts           5\n",
       "Delaware                4\n",
       "Nebraska                3\n",
       "Oregon                  2\n",
       "Iowa                    2\n",
       "Utah                    2\n",
       "Montana                 1\n",
       "WestVirginia            1\n",
       "Maine                   1\n",
       "Name: State, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# match states names in table - inc_2016_2019 to avoid duplicates before combining tables\n",
    "\n",
    "\n",
    "inc_2016_2019['State'] = inc_2016_2019['State'].str.replace(' ', '')\n",
    "inc_2016_2019['State'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# combining the files using sqlite3\n",
    "\n",
    "db = \"usa_mass.db\"\n",
    "\n",
    "def run_query(q):\n",
    "    with sqlite3.connect(db) as conn:\n",
    "            return pd.read_sql(q,conn)\n",
    "            \n",
    "def run_command(c):\n",
    "    with sqlite3.connect(db) as conn:\n",
    "        conn.execute('PRAGMA foreign_keys = ON;')        \n",
    "        conn.isolation_level = None\n",
    "        conn.execute(c)\n",
    "            \n",
    "def show_tables():\n",
    "    q = '''\n",
    "        SELECT \n",
    "              name,\n",
    "              type\n",
    "        FROM sqlite_master\n",
    "        WHERE type IN (\"table\", \"view\");\n",
    "        '''\n",
    "    return run_query(q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [name, type]\n",
       "Index: []"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w = '''DROP TABLE IF EXISTS mass_shootings_1966_2019;'''\n",
    "run_command(w)\n",
    "x = '''DROP TABLE IF EXISTS mass_shootings_1966_2019_ext;'''\n",
    "run_command(x)\n",
    "y = '''DROP TABLE IF EXISTS inc_2016_2019;'''\n",
    "run_command(y)\n",
    "z = '''DROP TABLE IF EXISTS mass_shootings;'''\n",
    "run_command(z)\n",
    "a = '''DROP TABLE IF EXISTS mass_year_diff;'''\n",
    "run_command(a)\n",
    "b = '''DROP TABLE IF EXISTS over_3_elect_party_by_state;'''\n",
    "run_command(b)\n",
    "c = '''DROP TABLE IF EXISTS att_2015_2019;'''\n",
    "run_command(c)\n",
    "d = '''DROP TABLE IF EXISTS att_state_party_15_19;'''\n",
    "run_command(d)\n",
    "e = '''DROP TABLE IF EXISTS att_2015_2019_pk;'''\n",
    "run_command(e)\n",
    "f = '''DROP TABLE IF EXISTS over_3_elect_party_by_state_pk;'''\n",
    "run_command(f)\n",
    "g = '''DROP TABLE IF EXISTS republicans_per_state;'''\n",
    "run_command(g)\n",
    "h = '''DROP TABLE IF EXISTS full_table_2015_2019;'''\n",
    "run_command(h)\n",
    "i = '''DROP TABLE IF EXISTS republican_per_att_state;'''\n",
    "run_command(i)\n",
    "j = '''DROP TABLE IF EXISTS pop_sate;'''\n",
    "run_command(j)\n",
    "k = '''DROP TABLE IF EXISTS republican_per_att_state_pk;'''\n",
    "run_command(k)\n",
    "l = '''DROP TABLE IF EXISTS pop_sate_PK;'''\n",
    "run_command(l)\n",
    "m = '''DROP TABLE IF EXISTS republicans_per_state_pk;'''\n",
    "run_command(m)\n",
    "n = '''DROP TABLE IF EXISTS full_table_2015_2019_pk;'''\n",
    "run_command(n)\n",
    "\n",
    "\n",
    "\n",
    "show_tables()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shiralavi/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:2130: UserWarning: The spaces in these column names will not be changed. In pandas versions < 0.14, spaces were converted to underscores.\n",
      "  dtype=dtype)\n"
     ]
    }
   ],
   "source": [
    "tables = {\n",
    "    'inc_2016_2019' : inc_2016_2019,\n",
    "    'mass_shootings' : mass_shootings\n",
    "}\n",
    "\n",
    "with sqlite3.connect(db) as conn:    \n",
    "    for name, data in tables.items():\n",
    "        conn.execute(\"DROP TABLE IF EXISTS {};\".format(name))\n",
    "        data.to_sql(name,conn,index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>inc_2016_2019</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mass_shootings</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             name   type\n",
       "0   inc_2016_2019  table\n",
       "1  mass_shootings  table"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "show_tables()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# combining the tables - create new table mass_shootings_1966_2019\n",
    "\n",
    "c1 = '''\n",
    "CREATE TABLE IF NOT EXISTS mass_shootings_1966_2019 (\n",
    "    year INTEGER,\n",
    "    date TEXT,\n",
    "    state TEXT,\n",
    "    city TEXT,\n",
    "    location TEXT,\n",
    "    Fatalities INTEGER,\n",
    "    injured INTEGER,\n",
    "    total_victims INTEGER\n",
    "    );\n",
    "'''\n",
    "\n",
    "run_command(c1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "c2 = '''\n",
    "INSERT OR REPLACE INTO mass_shootings_1966_2019\n",
    "    SELECT\n",
    "        year, \n",
    "        Date, \n",
    "        state, \n",
    "        city, \n",
    "        Location, \n",
    "        Fatalities, \n",
    "        Injured, \n",
    "        Fatalities + Injured AS total_victims\n",
    "    FROM mass_shootings\n",
    "    \n",
    "    UNION\n",
    "    \n",
    "    SELECT \n",
    "        year, \n",
    "        Date, \n",
    "        State, \n",
    "        City, \n",
    "        Address, \n",
    "        Fatalities, \n",
    "        Injured, \n",
    "        Fatalities + Injured AS total_victims\n",
    "    FROM inc_2016_2019\n",
    "    ;\n",
    "\n",
    "'''\n",
    "\n",
    "run_command(c2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>city</th>\n",
       "      <th>location</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1966</td>\n",
       "      <td>1966-08-01 00:00:00</td>\n",
       "      <td>Texas</td>\n",
       "      <td>Austin</td>\n",
       "      <td>Austin, Texas</td>\n",
       "      <td>17</td>\n",
       "      <td>32</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1966</td>\n",
       "      <td>1966-11-12 00:00:00</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>Mesa</td>\n",
       "      <td>Mesa, Arizona</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1971</td>\n",
       "      <td>1971-11-11 00:00:00</td>\n",
       "      <td>Washington</td>\n",
       "      <td>Spokane</td>\n",
       "      <td>Spokane, Washington</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1972</td>\n",
       "      <td>1972-12-31 00:00:00</td>\n",
       "      <td>Louisiana</td>\n",
       "      <td>New Orleans</td>\n",
       "      <td>New Orleans, Louisiana</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1974</td>\n",
       "      <td>1974-01-17 00:00:00</td>\n",
       "      <td>Illinois</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>Chicago, Illinois</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1974</td>\n",
       "      <td>1974-12-30 00:00:00</td>\n",
       "      <td>NewYork</td>\n",
       "      <td>Olean</td>\n",
       "      <td>Olean, New York</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1976</td>\n",
       "      <td>1976-02-19 00:00:00</td>\n",
       "      <td>California</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Los Angeles, California</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1976</td>\n",
       "      <td>1976-07-12 00:00:00</td>\n",
       "      <td>California</td>\n",
       "      <td>Fullerton</td>\n",
       "      <td>Fullerton, California</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1979</td>\n",
       "      <td>1979-01-29 00:00:00</td>\n",
       "      <td>California</td>\n",
       "      <td>San Diego</td>\n",
       "      <td>San Diego, California</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1979</td>\n",
       "      <td>1979-10-06 00:00:00</td>\n",
       "      <td>SouthCarolina</td>\n",
       "      <td>Columbia</td>\n",
       "      <td>Columbia, South Carolina</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1982</td>\n",
       "      <td>1982-03-19 00:00:00</td>\n",
       "      <td>Nevada</td>\n",
       "      <td>Las Vegas</td>\n",
       "      <td>Las Vegas, Nevada</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1982</td>\n",
       "      <td>1982-08-20 00:00:00</td>\n",
       "      <td>Florida</td>\n",
       "      <td>Miami</td>\n",
       "      <td>Miami, Florida</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1983</td>\n",
       "      <td>1983-02-18 00:00:00</td>\n",
       "      <td>Washington</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>Seattle, Washington</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1983</td>\n",
       "      <td>1983-08-19 00:00:00</td>\n",
       "      <td>SouthCarolina</td>\n",
       "      <td>Johnston</td>\n",
       "      <td>Johnston, South Carolina</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1984</td>\n",
       "      <td>1984-02-24 00:00:00</td>\n",
       "      <td>California</td>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>Los Angeles, California</td>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1984</td>\n",
       "      <td>1984-06-29 00:00:00</td>\n",
       "      <td>Texas</td>\n",
       "      <td>Dallas</td>\n",
       "      <td>Dallas, Texas</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1984</td>\n",
       "      <td>1984-07-18 00:00:00</td>\n",
       "      <td>California</td>\n",
       "      <td>San Ysidro</td>\n",
       "      <td>San Ysidro, California</td>\n",
       "      <td>22</td>\n",
       "      <td>19</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1985</td>\n",
       "      <td>1985-01-21 00:00:00</td>\n",
       "      <td>Kansas</td>\n",
       "      <td>Goddard</td>\n",
       "      <td>Goddard, Kansas</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1985</td>\n",
       "      <td>1985-03-06 00:00:00</td>\n",
       "      <td>Georgia</td>\n",
       "      <td>Atlanta</td>\n",
       "      <td>Atlanta, Georgia</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1986</td>\n",
       "      <td>1986-08-12 00:00:00</td>\n",
       "      <td>NewYork</td>\n",
       "      <td>Brooklyn</td>\n",
       "      <td>Brooklyn, New York</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    year                 date          state         city  \\\n",
       "0   1966  1966-08-01 00:00:00          Texas       Austin   \n",
       "1   1966  1966-11-12 00:00:00        Arizona         Mesa   \n",
       "2   1971  1971-11-11 00:00:00     Washington      Spokane   \n",
       "3   1972  1972-12-31 00:00:00      Louisiana  New Orleans   \n",
       "4   1974  1974-01-17 00:00:00       Illinois      Chicago   \n",
       "5   1974  1974-12-30 00:00:00        NewYork        Olean   \n",
       "6   1976  1976-02-19 00:00:00     California  Los Angeles   \n",
       "7   1976  1976-07-12 00:00:00     California    Fullerton   \n",
       "8   1979  1979-01-29 00:00:00     California    San Diego   \n",
       "9   1979  1979-10-06 00:00:00  SouthCarolina     Columbia   \n",
       "10  1982  1982-03-19 00:00:00         Nevada    Las Vegas   \n",
       "11  1982  1982-08-20 00:00:00        Florida        Miami   \n",
       "12  1983  1983-02-18 00:00:00     Washington      Seattle   \n",
       "13  1983  1983-08-19 00:00:00  SouthCarolina     Johnston   \n",
       "14  1984  1984-02-24 00:00:00     California  Los Angeles   \n",
       "15  1984  1984-06-29 00:00:00          Texas       Dallas   \n",
       "16  1984  1984-07-18 00:00:00     California   San Ysidro   \n",
       "17  1985  1985-01-21 00:00:00         Kansas      Goddard   \n",
       "18  1985  1985-03-06 00:00:00        Georgia      Atlanta   \n",
       "19  1986  1986-08-12 00:00:00        NewYork     Brooklyn   \n",
       "\n",
       "                    location  Fatalities  injured  total_victims  \n",
       "0              Austin, Texas          17       32             49  \n",
       "1              Mesa, Arizona           5        1              6  \n",
       "2        Spokane, Washington           2        4              6  \n",
       "3     New Orleans, Louisiana          10       13             23  \n",
       "4          Chicago, Illinois           1        3              4  \n",
       "5            Olean, New York           3        7             10  \n",
       "6    Los Angeles, California           1        7              8  \n",
       "7      Fullerton, California           7        2              9  \n",
       "8      San Diego, California           2        9             11  \n",
       "9   Columbia, South Carolina           2        5              7  \n",
       "10         Las Vegas, Nevada           1        2              3  \n",
       "11            Miami, Florida           9        3             12  \n",
       "12       Seattle, Washington          13        1             14  \n",
       "13  Johnston, South Carolina           1        3              4  \n",
       "14   Los Angeles, California           3       12             15  \n",
       "15             Dallas, Texas           6        1              7  \n",
       "16    San Ysidro, California          22       19             41  \n",
       "17           Goddard, Kansas           1        3              4  \n",
       "18          Atlanta, Georgia           2        1              3  \n",
       "19        Brooklyn, New York           1        4              5  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q1 = '''SELECT * FROM mass_shootings_1966_2019 LIMIT 20;'''\n",
    "\n",
    "run_query(q1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert table into pandas DataFrame\n",
    "\n",
    "conn = sqlite3.connect('usa_mass.db')\n",
    "mass_shootings_1966_2019 = pd.read_sql_query('SELECT * FROM mass_shootings_1966_2019',conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>date</th>\n",
       "      <th>state</th>\n",
       "      <th>city</th>\n",
       "      <th>location</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1966</td>\n",
       "      <td>1966-08-01 00:00:00</td>\n",
       "      <td>Texas</td>\n",
       "      <td>Austin</td>\n",
       "      <td>Austin, Texas</td>\n",
       "      <td>17</td>\n",
       "      <td>32</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1966</td>\n",
       "      <td>1966-11-12 00:00:00</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>Mesa</td>\n",
       "      <td>Mesa, Arizona</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1971</td>\n",
       "      <td>1971-11-11 00:00:00</td>\n",
       "      <td>Washington</td>\n",
       "      <td>Spokane</td>\n",
       "      <td>Spokane, Washington</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1972</td>\n",
       "      <td>1972-12-31 00:00:00</td>\n",
       "      <td>Louisiana</td>\n",
       "      <td>New Orleans</td>\n",
       "      <td>New Orleans, Louisiana</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1974</td>\n",
       "      <td>1974-01-17 00:00:00</td>\n",
       "      <td>Illinois</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>Chicago, Illinois</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year                 date       state         city                location  \\\n",
       "0  1966  1966-08-01 00:00:00       Texas       Austin           Austin, Texas   \n",
       "1  1966  1966-11-12 00:00:00     Arizona         Mesa           Mesa, Arizona   \n",
       "2  1971  1971-11-11 00:00:00  Washington      Spokane     Spokane, Washington   \n",
       "3  1972  1972-12-31 00:00:00   Louisiana  New Orleans  New Orleans, Louisiana   \n",
       "4  1974  1974-01-17 00:00:00    Illinois      Chicago       Chicago, Illinois   \n",
       "\n",
       "   Fatalities  injured  total_victims  \n",
       "0          17       32             49  \n",
       "1           5        1              6  \n",
       "2           2        4              6  \n",
       "3          10       13             23  \n",
       "4           1        3              4  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass_shootings_1966_2019.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create 'month' column\n",
    "\n",
    "mass_shootings_1966_2019['date'] = pd.to_datetime(mass_shootings_1966_2019.date)\n",
    "mass_shootings_1966_2019['month'] = mass_shootings_1966_2019['date'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "months = {\n",
    "    1 : 'January',\n",
    "    2 : 'February',\n",
    "    3 : 'March',\n",
    "    4 : 'April',\n",
    "    5 : 'May',\n",
    "    6 : 'June',\n",
    "    7 : 'July',\n",
    "    8 : 'August',\n",
    "    9 : 'September',\n",
    "    10 : 'October',\n",
    "    11 : 'November',\n",
    "    12 : 'December'\n",
    "}\n",
    "\n",
    "for key, value in months.items():\n",
    "    mass_shootings_1966_2019['month'] = mass_shootings_1966_2019['month'].replace(key, value)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "July         146\n",
       "June         145\n",
       "August       131\n",
       "February     119\n",
       "April        118\n",
       "October      110\n",
       "September    109\n",
       "January      108\n",
       "November     102\n",
       "May           98\n",
       "December      93\n",
       "March         84\n",
       "Name: month, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mass_shootings_1966_2019['month'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot number of shooting attacks per year\n",
    "\n",
    "att_per_year = mass_shootings_1966_2019[['location', 'year']].groupby('year').count()\n",
    "\n",
    "\n",
    "plt.style.use('fivethirtyeight')\n",
    "\n",
    "att_per_year.plot.bar(align = 'center', width = 0.7, figsize=(10,7))\n",
    "plt.title('Mass Shooting Attacks in the US per Year\\nYears 1966 - 2019', fontsize = 22)\n",
    "plt.ylim(0,400)\n",
    "plt.ylabel('No. of Attacks', fontsize=18)\n",
    "plt.xlabel('')\n",
    "plt.legend().set_visible(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot number of victims per year\n",
    "\n",
    "victims_per_year = mass_shootings_1966_2019[['total_victims', 'year']].groupby('year').sum()\n",
    "\n",
    "victims_per_year.plot.bar(align = 'center', width = 0.7, figsize=(10,7))\n",
    "plt.title('Mass Shooting Victims in the US per Year\\nYears 1966 - 2019', fontsize = 22)\n",
    "plt.ylim(0,2500)\n",
    "plt.ylabel('No. of Victims (Injured or Killed)', fontsize=18)\n",
    "plt.xlabel('')\n",
    "plt.legend().set_visible(False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Observation\n",
    "\n",
    "From the two charts above, it is clear that 2015 was a turning point where number of attacks and number of victims has drastically Increased. After that, in 2016, there was an even more drastic increase in number of attacks and victims.\n",
    "\n",
    "I would like to focus on mass shooting incidents from 2015 and later, to find out if there is a linkage between the number of mass shooting incidents and a states' political tendency.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Presidential Elections by State"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>1972</th>\n",
       "      <th>1976</th>\n",
       "      <th>1980</th>\n",
       "      <th>1984</th>\n",
       "      <th>1988</th>\n",
       "      <th>1992</th>\n",
       "      <th>1996</th>\n",
       "      <th>2000</th>\n",
       "      <th>2004</th>\n",
       "      <th>2008</th>\n",
       "      <th>2012</th>\n",
       "      <th>2016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Nixon</td>\n",
       "      <td>Carter</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Dole</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Bush</td>\n",
       "      <td>McCain</td>\n",
       "      <td>Romney</td>\n",
       "      <td>Trump</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Nixon</td>\n",
       "      <td>Ford</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Dole</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Bush</td>\n",
       "      <td>McCain</td>\n",
       "      <td>Romney</td>\n",
       "      <td>Trump</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>Nixon</td>\n",
       "      <td>Ford</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Clinton</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Bush</td>\n",
       "      <td>McCain</td>\n",
       "      <td>Romney</td>\n",
       "      <td>Trump</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>Nixon</td>\n",
       "      <td>Carter</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Clinton</td>\n",
       "      <td>Clinton</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Bush</td>\n",
       "      <td>McCain</td>\n",
       "      <td>Romney</td>\n",
       "      <td>Trump</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>Nixon</td>\n",
       "      <td>Ford</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Reagan</td>\n",
       "      <td>Bush</td>\n",
       "      <td>Clinton</td>\n",
       "      <td>Clinton</td>\n",
       "      <td>Gore</td>\n",
       "      <td>Kerry</td>\n",
       "      <td>Obama</td>\n",
       "      <td>Obama</td>\n",
       "      <td>H. Clinton</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state   1972    1976    1980    1984  1988     1992     1996  2000  \\\n",
       "0     Alabama  Nixon  Carter  Reagan  Reagan  Bush     Bush     Dole  Bush   \n",
       "1      Alaska  Nixon    Ford  Reagan  Reagan  Bush     Bush     Dole  Bush   \n",
       "2     Arizona  Nixon    Ford  Reagan  Reagan  Bush     Bush  Clinton  Bush   \n",
       "3    Arkansas  Nixon  Carter  Reagan  Reagan  Bush  Clinton  Clinton  Bush   \n",
       "4  California  Nixon    Ford  Reagan  Reagan  Bush  Clinton  Clinton  Gore   \n",
       "\n",
       "    2004    2008    2012        2016  \n",
       "0   Bush  McCain  Romney       Trump  \n",
       "1   Bush  McCain  Romney       Trump  \n",
       "2   Bush  McCain  Romney       Trump  \n",
       "3   Bush  McCain  Romney       Trump  \n",
       "4  Kerry   Obama   Obama  H. Clinton  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import data\n",
    "\n",
    "elections_by_state = pd.read_csv('/Users/shiralavi/Desktop/data_analysis/Projects/DBs/blue_and_red_states.csv',)\n",
    "elections_by_state.columns = ['state', '1972', '1976', '1980', '1984', '1988', '1992', '1996',\n",
    "       '2000', '2004', '2008', '2012', '2016']\n",
    "elections_by_state.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>1972</th>\n",
       "      <th>1976</th>\n",
       "      <th>1980</th>\n",
       "      <th>1984</th>\n",
       "      <th>1988</th>\n",
       "      <th>1992</th>\n",
       "      <th>1996</th>\n",
       "      <th>2000</th>\n",
       "      <th>2004</th>\n",
       "      <th>2008</th>\n",
       "      <th>2012</th>\n",
       "      <th>2016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Republican</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>Democratic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state        1972        1976        1980        1984        1988  \\\n",
       "0     Alabama  Republican  Democratic  Republican  Republican  Republican   \n",
       "1      Alaska  Republican  Republican  Republican  Republican  Republican   \n",
       "2     Arizona  Republican  Republican  Republican  Republican  Republican   \n",
       "3    Arkansas  Republican  Democratic  Republican  Republican  Republican   \n",
       "4  California  Republican  Republican  Republican  Republican  Republican   \n",
       "\n",
       "         1992        1996        2000        2004        2008        2012  \\\n",
       "0  Republican  Republican  Republican  Republican  Republican  Republican   \n",
       "1  Republican  Republican  Republican  Republican  Republican  Republican   \n",
       "2  Republican  Democratic  Republican  Republican  Republican  Republican   \n",
       "3  Democratic  Democratic  Republican  Republican  Republican  Republican   \n",
       "4  Democratic  Democratic  Democratic  Democratic  Democratic  Democratic   \n",
       "\n",
       "         2016  \n",
       "0  Republican  \n",
       "1  Republican  \n",
       "2  Republican  \n",
       "3  Republican  \n",
       "4  Democratic  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "party_by_state = elections_by_state.copy()\n",
    "\n",
    "can_party = {\n",
    "    'Nixon' : 'Republican',\n",
    "    'McGovern' : 'Democratic',\n",
    "    'Ford' : 'Republican',\n",
    "    'Carter' : 'Democratic',\n",
    "    'Reagan' : 'Republican',\n",
    "    'Anderson' : 'Independent',\n",
    "    'Mondale' : 'Democratic',\n",
    "    'Dukakis' : 'Democratic',\n",
    "    'Bush' : 'Republican',\n",
    "    'Clinton' : 'Democratic',\n",
    "    'Perot' : 'Reform',\n",
    "    'Dole' : 'Republican',\n",
    "    'Gore' : 'Democratic',\n",
    "    'Kerry' : 'Democratic',\n",
    "    'Obama' : 'Democratic',\n",
    "    'McCain' : 'Republican',\n",
    "    'Romney' :'Republican',\n",
    "    'Trump' : 'Republican',\n",
    "    'H. Clinton' : 'Democratic' \n",
    "}\n",
    "\n",
    "party_by_state.replace(can_party, inplace=True)\n",
    "\n",
    "party_by_state.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cross mass shooting data from 2015 - 2019 with the results of the last 3 presidential elections (2008 - 2016).\n",
    "<br>The reason for including the 2008 elections is to present a stronger base of each state's political tendency.\n",
    "\n",
    "\n",
    "##### General view over the last decade - Taking under consideration the last three elections results : 2008, 2012, 2016\n",
    "- A state would be defined as 'Democratic' or 'Republican' only if they have elected that party continuously over the last three elections.\n",
    "- In case there are inconsistencies (for example, one state elected Republican party twice and Democratic party once) I would mark this state as 'Neutral'.\n",
    "\n",
    "\n",
    "## Hypothesis - \n",
    "#### States that have continuously elected the 'Republican' party over the last decade experienced more mass shooting attacks in the last 4 years than states that have continuously elected the 'Democratic' party. \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>1972</th>\n",
       "      <th>1976</th>\n",
       "      <th>1980</th>\n",
       "      <th>1984</th>\n",
       "      <th>1988</th>\n",
       "      <th>1992</th>\n",
       "      <th>1996</th>\n",
       "      <th>2000</th>\n",
       "      <th>2004</th>\n",
       "      <th>2008</th>\n",
       "      <th>2012</th>\n",
       "      <th>2016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state  1972  1976  1980  1984  1988  1992  1996  2000  2004  2008  \\\n",
       "0     Alabama     0     1     0     0     0     0     0     0     0     0   \n",
       "1      Alaska     0     0     0     0     0     0     0     0     0     0   \n",
       "2     Arizona     0     0     0     0     0     0     1     0     0     0   \n",
       "3    Arkansas     0     1     0     0     0     1     1     0     0     0   \n",
       "4  California     0     0     0     0     0     1     1     1     1     1   \n",
       "\n",
       "   2012  2016  \n",
       "0     0     0  \n",
       "1     0     0  \n",
       "2     0     0  \n",
       "3     0     0  \n",
       "4     1     1  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "party_by_state_01 = party_by_state.copy()\n",
    "\n",
    "par_01 = {\n",
    "    'Democratic' : 1,\n",
    "    'Republican' :0\n",
    "}\n",
    "\n",
    "party_by_state_01.replace(par_01, inplace=True)\n",
    "party_by_state_01.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>2008</th>\n",
       "      <th>2012</th>\n",
       "      <th>2016</th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state  2008  2012  2016  total\n",
       "0     Alabama     0     0     0      0\n",
       "1      Alaska     0     0     0      0\n",
       "2     Arizona     0     0     0      0\n",
       "3    Arkansas     0     0     0      0\n",
       "4  California     1     1     1      3"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "over_3_elect_party_by_state = party_by_state_01[['state', '2008', '2012', '2016']].copy()\n",
    "\n",
    "over_3_elect_party_by_state['total'] =over_3_elect_party_by_state['2008'] + over_3_elect_party_by_state['2012'] + over_3_elect_party_by_state['2016']\n",
    "over_3_elect_party_by_state.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def party(row):\n",
    "    if row['total'] == 3:\n",
    "        return 'Democratic'\n",
    "    elif row['total'] == 0:\n",
    "        return 'Republican'\n",
    "    else:\n",
    "        return 'Neutral'\n",
    "    \n",
    "\n",
    "over_3_elect_party_by_state['party'] = over_3_elect_party_by_state.apply(party, axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>2008</th>\n",
       "      <th>2012</th>\n",
       "      <th>2016</th>\n",
       "      <th>total</th>\n",
       "      <th>party</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Democratic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state  2008  2012  2016  total       party\n",
       "0     Alabama     0     0     0      0  Republican\n",
       "1      Alaska     0     0     0      0  Republican\n",
       "2     Arizona     0     0     0      0  Republican\n",
       "3    Arkansas     0     0     0      0  Republican\n",
       "4  California     1     1     1      3  Democratic"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "over_3_elect_party_by_state.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2015 - 2019 Mass Shooting Attacks per State"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "      <th>attack</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>156</td>\n",
       "      <td>196</td>\n",
       "      <td>40</td>\n",
       "      <td>Alabama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "      <td>51</td>\n",
       "      <td>86</td>\n",
       "      <td>17</td>\n",
       "      <td>Arizona</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>14</td>\n",
       "      <td>74</td>\n",
       "      <td>88</td>\n",
       "      <td>15</td>\n",
       "      <td>Arkansas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>162</td>\n",
       "      <td>537</td>\n",
       "      <td>699</td>\n",
       "      <td>126</td>\n",
       "      <td>California</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26</td>\n",
       "      <td>54</td>\n",
       "      <td>80</td>\n",
       "      <td>16</td>\n",
       "      <td>Colorado</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4</td>\n",
       "      <td>48</td>\n",
       "      <td>52</td>\n",
       "      <td>10</td>\n",
       "      <td>Connecticut</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>Delaware</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "      <td>72</td>\n",
       "      <td>78</td>\n",
       "      <td>17</td>\n",
       "      <td>DistrictofColumbia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>171</td>\n",
       "      <td>455</td>\n",
       "      <td>626</td>\n",
       "      <td>96</td>\n",
       "      <td>Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>62</td>\n",
       "      <td>153</td>\n",
       "      <td>215</td>\n",
       "      <td>44</td>\n",
       "      <td>Georgia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Idaho</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>88</td>\n",
       "      <td>485</td>\n",
       "      <td>573</td>\n",
       "      <td>119</td>\n",
       "      <td>Illinois</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>22</td>\n",
       "      <td>96</td>\n",
       "      <td>118</td>\n",
       "      <td>26</td>\n",
       "      <td>Indiana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Iowa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>22</td>\n",
       "      <td>45</td>\n",
       "      <td>67</td>\n",
       "      <td>11</td>\n",
       "      <td>Kansas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>18</td>\n",
       "      <td>60</td>\n",
       "      <td>78</td>\n",
       "      <td>14</td>\n",
       "      <td>Kentucky</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>56</td>\n",
       "      <td>174</td>\n",
       "      <td>230</td>\n",
       "      <td>45</td>\n",
       "      <td>Louisiana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Maine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>35</td>\n",
       "      <td>107</td>\n",
       "      <td>142</td>\n",
       "      <td>29</td>\n",
       "      <td>Maryland</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>5</td>\n",
       "      <td>Massachusetts</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>34</td>\n",
       "      <td>96</td>\n",
       "      <td>130</td>\n",
       "      <td>27</td>\n",
       "      <td>Michigan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>11</td>\n",
       "      <td>56</td>\n",
       "      <td>67</td>\n",
       "      <td>14</td>\n",
       "      <td>Minnesota</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>40</td>\n",
       "      <td>82</td>\n",
       "      <td>122</td>\n",
       "      <td>24</td>\n",
       "      <td>Mississippi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>49</td>\n",
       "      <td>118</td>\n",
       "      <td>167</td>\n",
       "      <td>35</td>\n",
       "      <td>Missouri</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>Montana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>6</td>\n",
       "      <td>24</td>\n",
       "      <td>30</td>\n",
       "      <td>5</td>\n",
       "      <td>Nebraska</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>70</td>\n",
       "      <td>465</td>\n",
       "      <td>535</td>\n",
       "      <td>9</td>\n",
       "      <td>Nevada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>23</td>\n",
       "      <td>142</td>\n",
       "      <td>165</td>\n",
       "      <td>34</td>\n",
       "      <td>NewJersey</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "      <td>46</td>\n",
       "      <td>10</td>\n",
       "      <td>NewMexico</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>23</td>\n",
       "      <td>198</td>\n",
       "      <td>221</td>\n",
       "      <td>46</td>\n",
       "      <td>NewYork</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>46</td>\n",
       "      <td>98</td>\n",
       "      <td>144</td>\n",
       "      <td>32</td>\n",
       "      <td>NorthCarolina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>56</td>\n",
       "      <td>186</td>\n",
       "      <td>242</td>\n",
       "      <td>46</td>\n",
       "      <td>Ohio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>9</td>\n",
       "      <td>27</td>\n",
       "      <td>36</td>\n",
       "      <td>8</td>\n",
       "      <td>Oklahoma</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>Oregon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>62</td>\n",
       "      <td>163</td>\n",
       "      <td>225</td>\n",
       "      <td>47</td>\n",
       "      <td>Pennsylvania</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>24</td>\n",
       "      <td>78</td>\n",
       "      <td>102</td>\n",
       "      <td>19</td>\n",
       "      <td>SouthCarolina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>SouthDakota</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>38</td>\n",
       "      <td>198</td>\n",
       "      <td>236</td>\n",
       "      <td>48</td>\n",
       "      <td>Tennessee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>166</td>\n",
       "      <td>284</td>\n",
       "      <td>450</td>\n",
       "      <td>79</td>\n",
       "      <td>Texas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Utah</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>29</td>\n",
       "      <td>116</td>\n",
       "      <td>145</td>\n",
       "      <td>30</td>\n",
       "      <td>Virginia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>30</td>\n",
       "      <td>34</td>\n",
       "      <td>64</td>\n",
       "      <td>14</td>\n",
       "      <td>Washington</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>WestVirginia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>18</td>\n",
       "      <td>30</td>\n",
       "      <td>48</td>\n",
       "      <td>11</td>\n",
       "      <td>Wisconsin</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Fatalities  injured  total_victims  attack               state\n",
       "0           40      156            196      40             Alabama\n",
       "1           35       51             86      17             Arizona\n",
       "2           14       74             88      15            Arkansas\n",
       "3          162      537            699     126          California\n",
       "4           26       54             80      16            Colorado\n",
       "5            4       48             52      10         Connecticut\n",
       "6            6       12             18       4            Delaware\n",
       "7            6       72             78      17  DistrictofColumbia\n",
       "8          171      455            626      96             Florida\n",
       "9           62      153            215      44             Georgia\n",
       "10           3        1              4       1               Idaho\n",
       "11          88      485            573     119            Illinois\n",
       "12          22       96            118      26             Indiana\n",
       "13           1        8              9       2                Iowa\n",
       "14          22       45             67      11              Kansas\n",
       "15          18       60             78      14            Kentucky\n",
       "16          56      174            230      45           Louisiana\n",
       "17           8        1              9       2               Maine\n",
       "18          35      107            142      29            Maryland\n",
       "19           2       21             23       5       Massachusetts\n",
       "20          34       96            130      27            Michigan\n",
       "21          11       56             67      14           Minnesota\n",
       "22          40       82            122      24         Mississippi\n",
       "23          49      118            167      35            Missouri\n",
       "24           8        2             10       2             Montana\n",
       "25           6       24             30       5            Nebraska\n",
       "26          70      465            535       9              Nevada\n",
       "27          23      142            165      34           NewJersey\n",
       "28          25       21             46      10           NewMexico\n",
       "29          23      198            221      46             NewYork\n",
       "30          46       98            144      32       NorthCarolina\n",
       "31          56      186            242      46                Ohio\n",
       "32           9       27             36       8            Oklahoma\n",
       "33          13       12             25       3              Oregon\n",
       "34          62      163            225      47        Pennsylvania\n",
       "35          24       78            102      19       SouthCarolina\n",
       "36           6        0              6       1         SouthDakota\n",
       "37          38      198            236      48           Tennessee\n",
       "38         166      284            450      79               Texas\n",
       "39           3        6              9       2                Utah\n",
       "40          29      116            145      30            Virginia\n",
       "41          30       34             64      14          Washington\n",
       "42           1        3              4       1        WestVirginia\n",
       "43          18       30             48      11           Wisconsin"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create new dataframe with information about attacks in 2015-2019 per state\n",
    "\n",
    "att_2015_2019 = mass_shootings_1966_2019[['state', 'Fatalities', 'injured', 'total_victims']][mass_shootings_1966_2019['year'] >= 2015]\n",
    "att_2015_2019['attack'] = 1\n",
    "\n",
    "att_2015_2019 = att_2015_2019.groupby('state').sum()\n",
    "att_2015_2019['state'] = att_2015_2019.index\n",
    "att_2015_2019 = att_2015_2019.reset_index(drop=True)\n",
    "\n",
    "att_2015_2019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add missing states (with no mass shooting attacks in the last 4 years) to the dataframe\n",
    "\n",
    "att_2015_2019.loc[44] = [0, 0, 0, 0,'Alaska']\n",
    "att_2015_2019.loc[45] = [0, 0, 0, 0,'Hawaii']\n",
    "att_2015_2019.loc[46] = [0, 0, 0, 0,'NewHampshire']\n",
    "att_2015_2019.loc[47] = [0, 0, 0, 0,'NorthDakota']\n",
    "att_2015_2019.loc[48] = [0, 0, 0, 0,'RhodeIsland']\n",
    "att_2015_2019.loc[49] = [0, 0, 0, 0,'Vermont']\n",
    "att_2015_2019.loc[50] = [0, 0, 0, 0,'Wyoming']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "      <th>attack</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>156</td>\n",
       "      <td>196</td>\n",
       "      <td>40</td>\n",
       "      <td>Alabama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Alaska</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35</td>\n",
       "      <td>51</td>\n",
       "      <td>86</td>\n",
       "      <td>17</td>\n",
       "      <td>Arizona</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14</td>\n",
       "      <td>74</td>\n",
       "      <td>88</td>\n",
       "      <td>15</td>\n",
       "      <td>Arkansas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>162</td>\n",
       "      <td>537</td>\n",
       "      <td>699</td>\n",
       "      <td>126</td>\n",
       "      <td>California</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>26</td>\n",
       "      <td>54</td>\n",
       "      <td>80</td>\n",
       "      <td>16</td>\n",
       "      <td>Colorado</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4</td>\n",
       "      <td>48</td>\n",
       "      <td>52</td>\n",
       "      <td>10</td>\n",
       "      <td>Connecticut</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>4</td>\n",
       "      <td>Delaware</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>6</td>\n",
       "      <td>72</td>\n",
       "      <td>78</td>\n",
       "      <td>17</td>\n",
       "      <td>DistrictofColumbia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>171</td>\n",
       "      <td>455</td>\n",
       "      <td>626</td>\n",
       "      <td>96</td>\n",
       "      <td>Florida</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>62</td>\n",
       "      <td>153</td>\n",
       "      <td>215</td>\n",
       "      <td>44</td>\n",
       "      <td>Georgia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Hawaii</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Idaho</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>88</td>\n",
       "      <td>485</td>\n",
       "      <td>573</td>\n",
       "      <td>119</td>\n",
       "      <td>Illinois</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>22</td>\n",
       "      <td>96</td>\n",
       "      <td>118</td>\n",
       "      <td>26</td>\n",
       "      <td>Indiana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Iowa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>22</td>\n",
       "      <td>45</td>\n",
       "      <td>67</td>\n",
       "      <td>11</td>\n",
       "      <td>Kansas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>60</td>\n",
       "      <td>78</td>\n",
       "      <td>14</td>\n",
       "      <td>Kentucky</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>56</td>\n",
       "      <td>174</td>\n",
       "      <td>230</td>\n",
       "      <td>45</td>\n",
       "      <td>Louisiana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Maine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>35</td>\n",
       "      <td>107</td>\n",
       "      <td>142</td>\n",
       "      <td>29</td>\n",
       "      <td>Maryland</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>5</td>\n",
       "      <td>Massachusetts</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>34</td>\n",
       "      <td>96</td>\n",
       "      <td>130</td>\n",
       "      <td>27</td>\n",
       "      <td>Michigan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>11</td>\n",
       "      <td>56</td>\n",
       "      <td>67</td>\n",
       "      <td>14</td>\n",
       "      <td>Minnesota</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>40</td>\n",
       "      <td>82</td>\n",
       "      <td>122</td>\n",
       "      <td>24</td>\n",
       "      <td>Mississippi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>49</td>\n",
       "      <td>118</td>\n",
       "      <td>167</td>\n",
       "      <td>35</td>\n",
       "      <td>Missouri</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>Montana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>6</td>\n",
       "      <td>24</td>\n",
       "      <td>30</td>\n",
       "      <td>5</td>\n",
       "      <td>Nebraska</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>70</td>\n",
       "      <td>465</td>\n",
       "      <td>535</td>\n",
       "      <td>9</td>\n",
       "      <td>Nevada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NewHampshire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>23</td>\n",
       "      <td>142</td>\n",
       "      <td>165</td>\n",
       "      <td>34</td>\n",
       "      <td>NewJersey</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "      <td>46</td>\n",
       "      <td>10</td>\n",
       "      <td>NewMexico</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>23</td>\n",
       "      <td>198</td>\n",
       "      <td>221</td>\n",
       "      <td>46</td>\n",
       "      <td>NewYork</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>46</td>\n",
       "      <td>98</td>\n",
       "      <td>144</td>\n",
       "      <td>32</td>\n",
       "      <td>NorthCarolina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NorthDakota</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>56</td>\n",
       "      <td>186</td>\n",
       "      <td>242</td>\n",
       "      <td>46</td>\n",
       "      <td>Ohio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>9</td>\n",
       "      <td>27</td>\n",
       "      <td>36</td>\n",
       "      <td>8</td>\n",
       "      <td>Oklahoma</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>Oregon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>62</td>\n",
       "      <td>163</td>\n",
       "      <td>225</td>\n",
       "      <td>47</td>\n",
       "      <td>Pennsylvania</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>RhodeIsland</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>24</td>\n",
       "      <td>78</td>\n",
       "      <td>102</td>\n",
       "      <td>19</td>\n",
       "      <td>SouthCarolina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>SouthDakota</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>38</td>\n",
       "      <td>198</td>\n",
       "      <td>236</td>\n",
       "      <td>48</td>\n",
       "      <td>Tennessee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>166</td>\n",
       "      <td>284</td>\n",
       "      <td>450</td>\n",
       "      <td>79</td>\n",
       "      <td>Texas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>Utah</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Vermont</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>29</td>\n",
       "      <td>116</td>\n",
       "      <td>145</td>\n",
       "      <td>30</td>\n",
       "      <td>Virginia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>30</td>\n",
       "      <td>34</td>\n",
       "      <td>64</td>\n",
       "      <td>14</td>\n",
       "      <td>Washington</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>WestVirginia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>18</td>\n",
       "      <td>30</td>\n",
       "      <td>48</td>\n",
       "      <td>11</td>\n",
       "      <td>Wisconsin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Wyoming</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Fatalities  injured  total_victims  attack               state\n",
       "0           40      156            196      40             Alabama\n",
       "1            0        0              0       0              Alaska\n",
       "2           35       51             86      17             Arizona\n",
       "3           14       74             88      15            Arkansas\n",
       "4          162      537            699     126          California\n",
       "5           26       54             80      16            Colorado\n",
       "6            4       48             52      10         Connecticut\n",
       "7            6       12             18       4            Delaware\n",
       "8            6       72             78      17  DistrictofColumbia\n",
       "9          171      455            626      96             Florida\n",
       "10          62      153            215      44             Georgia\n",
       "11           0        0              0       0              Hawaii\n",
       "12           3        1              4       1               Idaho\n",
       "13          88      485            573     119            Illinois\n",
       "14          22       96            118      26             Indiana\n",
       "15           1        8              9       2                Iowa\n",
       "16          22       45             67      11              Kansas\n",
       "17          18       60             78      14            Kentucky\n",
       "18          56      174            230      45           Louisiana\n",
       "19           8        1              9       2               Maine\n",
       "20          35      107            142      29            Maryland\n",
       "21           2       21             23       5       Massachusetts\n",
       "22          34       96            130      27            Michigan\n",
       "23          11       56             67      14           Minnesota\n",
       "24          40       82            122      24         Mississippi\n",
       "25          49      118            167      35            Missouri\n",
       "26           8        2             10       2             Montana\n",
       "27           6       24             30       5            Nebraska\n",
       "28          70      465            535       9              Nevada\n",
       "29           0        0              0       0        NewHampshire\n",
       "30          23      142            165      34           NewJersey\n",
       "31          25       21             46      10           NewMexico\n",
       "32          23      198            221      46             NewYork\n",
       "33          46       98            144      32       NorthCarolina\n",
       "34           0        0              0       0         NorthDakota\n",
       "35          56      186            242      46                Ohio\n",
       "36           9       27             36       8            Oklahoma\n",
       "37          13       12             25       3              Oregon\n",
       "38          62      163            225      47        Pennsylvania\n",
       "39           0        0              0       0         RhodeIsland\n",
       "40          24       78            102      19       SouthCarolina\n",
       "41           6        0              6       1         SouthDakota\n",
       "42          38      198            236      48           Tennessee\n",
       "43         166      284            450      79               Texas\n",
       "44           3        6              9       2                Utah\n",
       "45           0        0              0       0             Vermont\n",
       "46          29      116            145      30            Virginia\n",
       "47          30       34             64      14          Washington\n",
       "48           1        3              4       1        WestVirginia\n",
       "49          18       30             48      11           Wisconsin\n",
       "50           0        0              0       0             Wyoming"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "att_2015_2019 = att_2015_2019.sort_values('state', ascending=True)\n",
    "att_2015_2019 = att_2015_2019.reset_index(drop=True)\n",
    "\n",
    "att_2015_2019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shiralavi/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:2130: UserWarning: The spaces in these column names will not be changed. In pandas versions < 0.14, spaces were converted to underscores.\n",
      "  dtype=dtype)\n"
     ]
    }
   ],
   "source": [
    "# convert dataframe to sqlite to combine tables\n",
    "\n",
    "tables['over_3_elect_party_by_state'] = over_3_elect_party_by_state\n",
    "tables['att_2015_2019'] = att_2015_2019\n",
    "\n",
    "with sqlite3.connect(db) as conn:    \n",
    "    for name, data in tables.items():\n",
    "        conn.execute(\"DROP TABLE IF EXISTS {};\".format(name))\n",
    "        data.to_sql(name,conn,index=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>mass_shootings_1966_2019</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>inc_2016_2019</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>mass_shootings</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>over_3_elect_party_by_state</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>att_2015_2019</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          name   type\n",
       "0     mass_shootings_1966_2019  table\n",
       "1                inc_2016_2019  table\n",
       "2               mass_shootings  table\n",
       "3  over_3_elect_party_by_state  table\n",
       "4                att_2015_2019  table"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "show_tables()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# recreating the tables to set state as primary key\n",
    "\n",
    "\n",
    "c12 = '''CREATE TABLE att_2015_2019_pk(\n",
    "            state TEXT PRIMARY KEY,\n",
    "            attacks INTEGER,\n",
    "            Fatalities INTEGER,\n",
    "            injured INTEGER,\n",
    "            total_victims INTEGER\n",
    "            );\n",
    "'''\n",
    "\n",
    "c13 = '''CREATE TABLE over_3_elect_party_by_state_pk(\n",
    "            state TEXT PRIMARY KEY,\n",
    "            party TEXT\n",
    "            );\n",
    "'''\n",
    "\n",
    "\n",
    "c14 = '''\n",
    "    INSERT OR REPLACE INTO att_2015_2019_pk\n",
    "    SELECT\n",
    "        state as state, \n",
    "        attack as attacks, \n",
    "        Fatalities as Fatalities, \n",
    "        injured as injured, \n",
    "        total_victims as total_victims\n",
    "    FROM att_2015_2019;\n",
    "    '''\n",
    "\n",
    "\n",
    "c15 = '''\n",
    "    INSERT OR REPLACE INTO over_3_elect_party_by_state_pk\n",
    "    SELECT\n",
    "        state, \n",
    "        party\n",
    "        FROM over_3_elect_party_by_state;\n",
    "    '''\n",
    "\n",
    "\n",
    "c16 = '''DROP TABLE IF EXISTS att_2015_2019;'''\n",
    "c17 = '''DROP TABLE IF EXISTS over_3_elect_party_by_state;'''\n",
    "\n",
    "\n",
    "\n",
    "run_command(c12)\n",
    "run_command(c13)\n",
    "run_command(c14)\n",
    "run_command(c15)\n",
    "run_command(c16)\n",
    "run_command(c17)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>party</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>Republican</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>Democratic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>Democratic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>Democratic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>Democratic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DistrictofColumbia</td>\n",
       "      <td>Democratic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Florida</td>\n",
       "      <td>Neutral</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                state       party\n",
       "0             Alabama  Republican\n",
       "1              Alaska  Republican\n",
       "2             Arizona  Republican\n",
       "3            Arkansas  Republican\n",
       "4          California  Democratic\n",
       "5            Colorado  Democratic\n",
       "6         Connecticut  Democratic\n",
       "7            Delaware  Democratic\n",
       "8  DistrictofColumbia  Democratic\n",
       "9             Florida     Neutral"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q14 = '''SELECT * FROM over_3_elect_party_by_state_pk LIMIT 10;'''\n",
    "\n",
    "run_query(q14)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>attacks</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>156</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>17</td>\n",
       "      <td>35</td>\n",
       "      <td>51</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>74</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>126</td>\n",
       "      <td>162</td>\n",
       "      <td>537</td>\n",
       "      <td>699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>16</td>\n",
       "      <td>26</td>\n",
       "      <td>54</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>48</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DistrictofColumbia</td>\n",
       "      <td>17</td>\n",
       "      <td>6</td>\n",
       "      <td>72</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Florida</td>\n",
       "      <td>96</td>\n",
       "      <td>171</td>\n",
       "      <td>455</td>\n",
       "      <td>626</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                state  attacks  Fatalities  injured  total_victims\n",
       "0             Alabama       40          40      156            196\n",
       "1              Alaska        0           0        0              0\n",
       "2             Arizona       17          35       51             86\n",
       "3            Arkansas       15          14       74             88\n",
       "4          California      126         162      537            699\n",
       "5            Colorado       16          26       54             80\n",
       "6         Connecticut       10           4       48             52\n",
       "7            Delaware        4           6       12             18\n",
       "8  DistrictofColumbia       17           6       72             78\n",
       "9             Florida       96         171      455            626"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q15 = '''SELECT * FROM att_2015_2019_pk LIMIT 10;'''\n",
    "\n",
    "run_query(q15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# combining the tables and convert into pandas dataframe\n",
    "\n",
    "\n",
    "q16 = '''\n",
    "        SELECT \n",
    "            a22.state, \n",
    "            o3e.party, \n",
    "            a22.attacks, \n",
    "            a22.Fatalities, \n",
    "            a22.injured, \n",
    "            a22.total_victims\n",
    "        FROM att_2015_2019_pk a22\n",
    "        LEFT JOIN over_3_elect_party_by_state_pk o3e ON o3e.state = a22.state;\n",
    "'''\n",
    "\n",
    "full_table_2015_2019 = run_query(q16)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>party</th>\n",
       "      <th>attacks</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Republican</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>156</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>Republican</td>\n",
       "      <td>17</td>\n",
       "      <td>35</td>\n",
       "      <td>51</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>Republican</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>74</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>126</td>\n",
       "      <td>162</td>\n",
       "      <td>537</td>\n",
       "      <td>699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>16</td>\n",
       "      <td>26</td>\n",
       "      <td>54</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>48</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DistrictofColumbia</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>17</td>\n",
       "      <td>6</td>\n",
       "      <td>72</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Florida</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>96</td>\n",
       "      <td>171</td>\n",
       "      <td>455</td>\n",
       "      <td>626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Georgia</td>\n",
       "      <td>Republican</td>\n",
       "      <td>44</td>\n",
       "      <td>62</td>\n",
       "      <td>153</td>\n",
       "      <td>215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Hawaii</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Idaho</td>\n",
       "      <td>Republican</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>119</td>\n",
       "      <td>88</td>\n",
       "      <td>485</td>\n",
       "      <td>573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Indiana</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>26</td>\n",
       "      <td>22</td>\n",
       "      <td>96</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Iowa</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Kansas</td>\n",
       "      <td>Republican</td>\n",
       "      <td>11</td>\n",
       "      <td>22</td>\n",
       "      <td>45</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Kentucky</td>\n",
       "      <td>Republican</td>\n",
       "      <td>14</td>\n",
       "      <td>18</td>\n",
       "      <td>60</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Louisiana</td>\n",
       "      <td>Republican</td>\n",
       "      <td>45</td>\n",
       "      <td>56</td>\n",
       "      <td>174</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Maine</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>29</td>\n",
       "      <td>35</td>\n",
       "      <td>107</td>\n",
       "      <td>142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Michigan</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>27</td>\n",
       "      <td>34</td>\n",
       "      <td>96</td>\n",
       "      <td>130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Minnesota</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>14</td>\n",
       "      <td>11</td>\n",
       "      <td>56</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>Republican</td>\n",
       "      <td>24</td>\n",
       "      <td>40</td>\n",
       "      <td>82</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Missouri</td>\n",
       "      <td>Republican</td>\n",
       "      <td>35</td>\n",
       "      <td>49</td>\n",
       "      <td>118</td>\n",
       "      <td>167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Montana</td>\n",
       "      <td>Republican</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Nebraska</td>\n",
       "      <td>Republican</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>24</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Nevada</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>9</td>\n",
       "      <td>70</td>\n",
       "      <td>465</td>\n",
       "      <td>535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>NewHampshire</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>NewJersey</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>34</td>\n",
       "      <td>23</td>\n",
       "      <td>142</td>\n",
       "      <td>165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>NewMexico</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>NewYork</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>46</td>\n",
       "      <td>23</td>\n",
       "      <td>198</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>NorthCarolina</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>32</td>\n",
       "      <td>46</td>\n",
       "      <td>98</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>NorthDakota</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Ohio</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>46</td>\n",
       "      <td>56</td>\n",
       "      <td>186</td>\n",
       "      <td>242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Oklahoma</td>\n",
       "      <td>Republican</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>27</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Oregon</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Pennsylvania</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>47</td>\n",
       "      <td>62</td>\n",
       "      <td>163</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>RhodeIsland</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>SouthCarolina</td>\n",
       "      <td>Republican</td>\n",
       "      <td>19</td>\n",
       "      <td>24</td>\n",
       "      <td>78</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>SouthDakota</td>\n",
       "      <td>Republican</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Tennessee</td>\n",
       "      <td>Republican</td>\n",
       "      <td>48</td>\n",
       "      <td>38</td>\n",
       "      <td>198</td>\n",
       "      <td>236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Texas</td>\n",
       "      <td>Republican</td>\n",
       "      <td>79</td>\n",
       "      <td>166</td>\n",
       "      <td>284</td>\n",
       "      <td>450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Utah</td>\n",
       "      <td>Republican</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Vermont</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Virginia</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>30</td>\n",
       "      <td>29</td>\n",
       "      <td>116</td>\n",
       "      <td>145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Washington</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>14</td>\n",
       "      <td>30</td>\n",
       "      <td>34</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>WestVirginia</td>\n",
       "      <td>Republican</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Wisconsin</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>11</td>\n",
       "      <td>18</td>\n",
       "      <td>30</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 state       party  attacks  Fatalities  injured  \\\n",
       "0              Alabama  Republican       40          40      156   \n",
       "1               Alaska  Republican        0           0        0   \n",
       "2              Arizona  Republican       17          35       51   \n",
       "3             Arkansas  Republican       15          14       74   \n",
       "4           California  Democratic      126         162      537   \n",
       "5             Colorado  Democratic       16          26       54   \n",
       "6          Connecticut  Democratic       10           4       48   \n",
       "7             Delaware  Democratic        4           6       12   \n",
       "8   DistrictofColumbia  Democratic       17           6       72   \n",
       "9              Florida     Neutral       96         171      455   \n",
       "10             Georgia  Republican       44          62      153   \n",
       "11              Hawaii  Democratic        0           0        0   \n",
       "12               Idaho  Republican        1           3        1   \n",
       "13            Illinois  Democratic      119          88      485   \n",
       "14             Indiana     Neutral       26          22       96   \n",
       "15                Iowa     Neutral        2           1        8   \n",
       "16              Kansas  Republican       11          22       45   \n",
       "17            Kentucky  Republican       14          18       60   \n",
       "18           Louisiana  Republican       45          56      174   \n",
       "19               Maine  Democratic        2           8        1   \n",
       "20            Maryland  Democratic       29          35      107   \n",
       "21       Massachusetts  Democratic        5           2       21   \n",
       "22            Michigan     Neutral       27          34       96   \n",
       "23           Minnesota  Democratic       14          11       56   \n",
       "24         Mississippi  Republican       24          40       82   \n",
       "25            Missouri  Republican       35          49      118   \n",
       "26             Montana  Republican        2           8        2   \n",
       "27            Nebraska  Republican        5           6       24   \n",
       "28              Nevada  Democratic        9          70      465   \n",
       "29        NewHampshire  Democratic        0           0        0   \n",
       "30           NewJersey  Democratic       34          23      142   \n",
       "31           NewMexico  Democratic       10          25       21   \n",
       "32             NewYork  Democratic       46          23      198   \n",
       "33       NorthCarolina     Neutral       32          46       98   \n",
       "34         NorthDakota  Republican        0           0        0   \n",
       "35                Ohio     Neutral       46          56      186   \n",
       "36            Oklahoma  Republican        8           9       27   \n",
       "37              Oregon  Democratic        3          13       12   \n",
       "38        Pennsylvania     Neutral       47          62      163   \n",
       "39         RhodeIsland  Democratic        0           0        0   \n",
       "40       SouthCarolina  Republican       19          24       78   \n",
       "41         SouthDakota  Republican        1           6        0   \n",
       "42           Tennessee  Republican       48          38      198   \n",
       "43               Texas  Republican       79         166      284   \n",
       "44                Utah  Republican        2           3        6   \n",
       "45             Vermont  Democratic        0           0        0   \n",
       "46            Virginia  Democratic       30          29      116   \n",
       "47          Washington  Democratic       14          30       34   \n",
       "48        WestVirginia  Republican        1           1        3   \n",
       "49           Wisconsin     Neutral       11          18       30   \n",
       "50             Wyoming  Republican        0           0        0   \n",
       "\n",
       "    total_victims  \n",
       "0             196  \n",
       "1               0  \n",
       "2              86  \n",
       "3              88  \n",
       "4             699  \n",
       "5              80  \n",
       "6              52  \n",
       "7              18  \n",
       "8              78  \n",
       "9             626  \n",
       "10            215  \n",
       "11              0  \n",
       "12              4  \n",
       "13            573  \n",
       "14            118  \n",
       "15              9  \n",
       "16             67  \n",
       "17             78  \n",
       "18            230  \n",
       "19              9  \n",
       "20            142  \n",
       "21             23  \n",
       "22            130  \n",
       "23             67  \n",
       "24            122  \n",
       "25            167  \n",
       "26             10  \n",
       "27             30  \n",
       "28            535  \n",
       "29              0  \n",
       "30            165  \n",
       "31             46  \n",
       "32            221  \n",
       "33            144  \n",
       "34              0  \n",
       "35            242  \n",
       "36             36  \n",
       "37             25  \n",
       "38            225  \n",
       "39              0  \n",
       "40            102  \n",
       "41              6  \n",
       "42            236  \n",
       "43            450  \n",
       "44              9  \n",
       "45              0  \n",
       "46            145  \n",
       "47             64  \n",
       "48              4  \n",
       "49             48  \n",
       "50              0  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_table_2015_2019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create 'Republican', 'Democratic' and 'Neutral' tables\n",
    "\n",
    "republican_states = full_table_2015_2019[full_table_2015_2019['party'] == 'Republican']\n",
    "democratic_states = full_table_2015_2019[full_table_2015_2019['party'] == 'Democratic']\n",
    "neutral_states = full_table_2015_2019[full_table_2015_2019['party'] == 'Neutral']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Measure STD for No. of Attacks in each Political Sector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Political Sector</th>\n",
       "      <th>Average no. of Attacks per State</th>\n",
       "      <th>STD of Number of Attacks per State</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Republican</td>\n",
       "      <td>18.681818</td>\n",
       "      <td>20.802942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Democratic</td>\n",
       "      <td>23.238095</td>\n",
       "      <td>34.490723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Neutral</td>\n",
       "      <td>35.875000</td>\n",
       "      <td>26.923213</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Political Sector  Average no. of Attacks per State  \\\n",
       "0       Republican                         18.681818   \n",
       "1       Democratic                         23.238095   \n",
       "2          Neutral                         35.875000   \n",
       "\n",
       "   STD of Number of Attacks per State  \n",
       "0                           20.802942  \n",
       "1                           34.490723  \n",
       "2                           26.923213  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = {'Political Sector' : ['Republican', 'Democratic', 'Neutral'], 'Average no. of Attacks per State': [np.mean(republican_states['attacks']), np.mean(democratic_states['attacks']), np.mean(neutral_states['attacks'])], 'STD of Number of Attacks per State': [np.std(republican_states['attacks']), np.std(democratic_states['attacks']), np.std(neutral_states['attacks'])]}\n",
    "\n",
    "mean_std_attacks = pd.DataFrame(data=d)\n",
    "mean_std_attacks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_std_attacks = mean_std_attacks.set_index('Political Sector')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11d00d438>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('fivethirtyeight')\n",
    "\n",
    "mean_std_attacks.plot.bar(align = 'center', width = 0.7, figsize=(10,7))\n",
    "plt.title('Attacks per each Political Sector states - Mean and STD', fontsize = 22, Y= 1.1)\n",
    "plt.ylim(0,50)\n",
    "plt.ylabel('')\n",
    "plt.xlabel('')\n",
    "plt.xticks(rotation='horizontal')\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>party</th>\n",
       "      <th>attacks</th>\n",
       "      <th>Fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Hawaii</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>NewHampshire</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>RhodeIsland</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Vermont</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           state       party  attacks  Fatalities  injured  total_victims\n",
       "11        Hawaii  Democratic        0           0        0              0\n",
       "29  NewHampshire  Democratic        0           0        0              0\n",
       "39   RhodeIsland  Democratic        0           0        0              0\n",
       "45       Vermont  Democratic        0           0        0              0"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(democratic_states.shape[0])\n",
    "democratic_states[democratic_states['attacks'] == 0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, Republican states have the lowest mean number of attacks per state (18.6 attacks per state) and lowest STD (20.8). <br>\n",
    "Having the lowest STD means that the values (Number of attacks per states) are all relatively clustered around the mean.<br><br> \n",
    "Democratic states have a higher number of attacks per state in average, but also have a higher STD.<br> \n",
    "Having higher STD, tells us that the range of number of attacks per state in Democratic states is higher, there are Democratic states with very high number of attacks (like California), and Democratic states with non (like Hawaii, New Hampshire, Rhode Island, Vermont). <br>\n",
    "\n",
    "The high STD in Democratic states lets us know that the high mean number of attacks in those states don't necessarily have something to do with them being Democratic. \n",
    "<br><br>\n",
    "\n",
    "#### I would like to look farther to find if there is a connection between the percentage of republican voters in a state and number of mass shooting attacks.\n",
    "<br>\n",
    "In order to do so I would use an additional table - 'rep_percentage2008_2016_elections'.<br>\n",
    "This table contains information about the last 3 presidential elections (2008, 2012, 2016) - Total number of voters per state, and number of people who have voted for the Republican party.  \n",
    "<br>\n",
    "\n",
    "<br>\n",
    "\n",
    "The data in this table was collected independently using various sources."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>Republican Votes 2008</th>\n",
       "      <th>Total Number of Voters 2008</th>\n",
       "      <th>Republican Votes 2012</th>\n",
       "      <th>Total Number of Voters 2012</th>\n",
       "      <th>Republican Votes 2016</th>\n",
       "      <th>Total Number of Voters 2016</th>\n",
       "      <th>Total Number of Voters</th>\n",
       "      <th>Republican Votes</th>\n",
       "      <th>Republican Percentage 2008-2016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>1,266,546</td>\n",
       "      <td>2,099,819</td>\n",
       "      <td>1,255,925</td>\n",
       "      <td>2,074,338</td>\n",
       "      <td>1,318,255</td>\n",
       "      <td>2,123,372</td>\n",
       "      <td>6,297,529</td>\n",
       "      <td>3,840,726</td>\n",
       "      <td>0.609878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>193,841</td>\n",
       "      <td>326,197</td>\n",
       "      <td>164,676</td>\n",
       "      <td>300,495</td>\n",
       "      <td>163,387</td>\n",
       "      <td>318,608</td>\n",
       "      <td>945,300</td>\n",
       "      <td>521,904</td>\n",
       "      <td>0.552104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>1,230,111</td>\n",
       "      <td>2,293,475</td>\n",
       "      <td>1,233,654</td>\n",
       "      <td>2,299,254</td>\n",
       "      <td>1,252,401</td>\n",
       "      <td>2,573,165</td>\n",
       "      <td>7,165,894</td>\n",
       "      <td>3,716,166</td>\n",
       "      <td>0.518591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>638,017</td>\n",
       "      <td>1,086,617</td>\n",
       "      <td>647,744</td>\n",
       "      <td>1,069,468</td>\n",
       "      <td>684,872</td>\n",
       "      <td>1,130,635</td>\n",
       "      <td>3,286,720</td>\n",
       "      <td>1,970,633</td>\n",
       "      <td>0.599574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>5,011,781</td>\n",
       "      <td>13,561,900</td>\n",
       "      <td>4,839,958</td>\n",
       "      <td>13,038,547</td>\n",
       "      <td>4,483,810</td>\n",
       "      <td>14,181,595</td>\n",
       "      <td>40,782,042</td>\n",
       "      <td>14,335,549</td>\n",
       "      <td>0.351516</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state Republican Votes 2008 Total Number of Voters 2008  \\\n",
       "0     Alabama             1,266,546                   2,099,819   \n",
       "1      Alaska               193,841                     326,197   \n",
       "2     Arizona             1,230,111                   2,293,475   \n",
       "3    Arkansas               638,017                   1,086,617   \n",
       "4  California             5,011,781                  13,561,900   \n",
       "\n",
       "  Republican Votes 2012 Total Number of Voters 2012 Republican Votes 2016  \\\n",
       "0             1,255,925                   2,074,338             1,318,255   \n",
       "1               164,676                     300,495               163,387   \n",
       "2             1,233,654                   2,299,254             1,252,401   \n",
       "3               647,744                   1,069,468               684,872   \n",
       "4             4,839,958                  13,038,547             4,483,810   \n",
       "\n",
       "  Total Number of Voters 2016 Total Number of Voters  Republican Votes  \\\n",
       "0                   2,123,372               6,297,529        3,840,726   \n",
       "1                     318,608                 945,300          521,904   \n",
       "2                   2,573,165               7,165,894        3,716,166   \n",
       "3                   1,130,635               3,286,720        1,970,633   \n",
       "4                  14,181,595              40,782,042       14,335,549   \n",
       "\n",
       "   Republican Percentage 2008-2016  \n",
       "0                         0.609878  \n",
       "1                         0.552104  \n",
       "2                         0.518591  \n",
       "3                         0.599574  \n",
       "4                         0.351516  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import data\n",
    "\n",
    "republicans_per_state = pd.read_csv('/Users/shiralavi/Desktop/data_analysis/Projects/DBs/rep_percentage2008_2016_elections.csv')\n",
    "\n",
    "republicans_per_state.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "republicans_per_state.columns = ['state', 'Republican Votes 2008', 'Total Number of Voters 2008',\n",
    "       'Republican Votes 2012', 'Total Number of Voters 2012',\n",
    "       'Republican Votes 2016', 'Total Number of Voters 2016',\n",
    "       'Total_Number_of_Voters', 'Republican_Votes',\n",
    "       'Republican_Percentage_2008_2016']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>Republican_Percentage_2008_2016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>0.609878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>0.552104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>0.518591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>0.599574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>0.351516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>0.446556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>0.399436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>0.396005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DistrictofColumbia</td>\n",
       "      <td>0.059102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Florida</td>\n",
       "      <td>0.487996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Georgia</td>\n",
       "      <td>0.520681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Hawaii</td>\n",
       "      <td>0.281223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Idaho</td>\n",
       "      <td>0.617214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>0.387245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Indiana</td>\n",
       "      <td>0.533069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Iowa</td>\n",
       "      <td>0.472534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Kansas</td>\n",
       "      <td>0.576303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Kentucky</td>\n",
       "      <td>0.601773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Louisiana</td>\n",
       "      <td>0.581427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Maine</td>\n",
       "      <td>0.421090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>0.354036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>0.353889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Michigan</td>\n",
       "      <td>0.443396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Minnesota</td>\n",
       "      <td>0.445712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>0.564377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Missouri</td>\n",
       "      <td>0.532646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Montana</td>\n",
       "      <td>0.536821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Nebraska</td>\n",
       "      <td>0.583635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Nevada</td>\n",
       "      <td>0.446713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>NewHampshire</td>\n",
       "      <td>0.458048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>NewJersey</td>\n",
       "      <td>0.412271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>NewMexico</td>\n",
       "      <td>0.415501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>NewYork</td>\n",
       "      <td>0.359245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>NorthCarolina</td>\n",
       "      <td>0.498719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>NorthDakota</td>\n",
       "      <td>0.583116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Ohio</td>\n",
       "      <td>0.487336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Oklahoma</td>\n",
       "      <td>0.658889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Oregon</td>\n",
       "      <td>0.404924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Pennsylvania</td>\n",
       "      <td>0.463242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>RhodeIsland</td>\n",
       "      <td>0.364076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>SouthCarolina</td>\n",
       "      <td>0.544734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>SouthDakota</td>\n",
       "      <td>0.574778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Tennessee</td>\n",
       "      <td>0.590038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Texas</td>\n",
       "      <td>0.548472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Utah</td>\n",
       "      <td>0.597136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Vermont</td>\n",
       "      <td>0.305557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Virginia</td>\n",
       "      <td>0.459851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Washington</td>\n",
       "      <td>0.394711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>WestVirginia</td>\n",
       "      <td>0.621686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Wisconsin</td>\n",
       "      <td>0.451445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>0.671881</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 state  Republican_Percentage_2008_2016\n",
       "0              Alabama                         0.609878\n",
       "1               Alaska                         0.552104\n",
       "2              Arizona                         0.518591\n",
       "3             Arkansas                         0.599574\n",
       "4           California                         0.351516\n",
       "5             Colorado                         0.446556\n",
       "6          Connecticut                         0.399436\n",
       "7             Delaware                         0.396005\n",
       "8   DistrictofColumbia                         0.059102\n",
       "9              Florida                         0.487996\n",
       "10             Georgia                         0.520681\n",
       "11              Hawaii                         0.281223\n",
       "12               Idaho                         0.617214\n",
       "13            Illinois                         0.387245\n",
       "14             Indiana                         0.533069\n",
       "15                Iowa                         0.472534\n",
       "16              Kansas                         0.576303\n",
       "17            Kentucky                         0.601773\n",
       "18           Louisiana                         0.581427\n",
       "19               Maine                         0.421090\n",
       "20            Maryland                         0.354036\n",
       "21       Massachusetts                         0.353889\n",
       "22            Michigan                         0.443396\n",
       "23           Minnesota                         0.445712\n",
       "24         Mississippi                         0.564377\n",
       "25            Missouri                         0.532646\n",
       "26             Montana                         0.536821\n",
       "27            Nebraska                         0.583635\n",
       "28              Nevada                         0.446713\n",
       "29        NewHampshire                         0.458048\n",
       "30           NewJersey                         0.412271\n",
       "31           NewMexico                         0.415501\n",
       "32             NewYork                         0.359245\n",
       "33       NorthCarolina                         0.498719\n",
       "34         NorthDakota                         0.583116\n",
       "35                Ohio                         0.487336\n",
       "36            Oklahoma                         0.658889\n",
       "37              Oregon                         0.404924\n",
       "38        Pennsylvania                         0.463242\n",
       "39         RhodeIsland                         0.364076\n",
       "40       SouthCarolina                         0.544734\n",
       "41         SouthDakota                         0.574778\n",
       "42           Tennessee                         0.590038\n",
       "43               Texas                         0.548472\n",
       "44                Utah                         0.597136\n",
       "45             Vermont                         0.305557\n",
       "46            Virginia                         0.459851\n",
       "47          Washington                         0.394711\n",
       "48        WestVirginia                         0.621686\n",
       "49           Wisconsin                         0.451445\n",
       "50             Wyoming                         0.671881"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "republicans_per_state[['state', 'Republican_Percentage_2008_2016']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shiralavi/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:2130: UserWarning: The spaces in these column names will not be changed. In pandas versions < 0.14, spaces were converted to underscores.\n",
      "  dtype=dtype)\n"
     ]
    }
   ],
   "source": [
    "# convert dataframe to sqlite to combine tables\n",
    "\n",
    "tables['republicans_per_state'] = republicans_per_state\n",
    "tables['full_table_2015_2019'] = full_table_2015_2019\n",
    "\n",
    "with sqlite3.connect(db) as conn:    \n",
    "    for name, data in tables.items():\n",
    "        conn.execute(\"DROP TABLE IF EXISTS {};\".format(name))\n",
    "        data.to_sql(name,conn,index=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>Republican Votes 2008</th>\n",
       "      <th>Total Number of Voters 2008</th>\n",
       "      <th>Republican Votes 2012</th>\n",
       "      <th>Total Number of Voters 2012</th>\n",
       "      <th>Republican Votes 2016</th>\n",
       "      <th>Total Number of Voters 2016</th>\n",
       "      <th>Total_Number_of_Voters</th>\n",
       "      <th>Republican_Votes</th>\n",
       "      <th>Republican_Percentage_2008_2016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>1,266,546</td>\n",
       "      <td>2,099,819</td>\n",
       "      <td>1,255,925</td>\n",
       "      <td>2,074,338</td>\n",
       "      <td>1,318,255</td>\n",
       "      <td>2,123,372</td>\n",
       "      <td>6,297,529</td>\n",
       "      <td>3,840,726</td>\n",
       "      <td>0.609878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>193,841</td>\n",
       "      <td>326,197</td>\n",
       "      <td>164,676</td>\n",
       "      <td>300,495</td>\n",
       "      <td>163,387</td>\n",
       "      <td>318,608</td>\n",
       "      <td>945,300</td>\n",
       "      <td>521,904</td>\n",
       "      <td>0.552104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>1,230,111</td>\n",
       "      <td>2,293,475</td>\n",
       "      <td>1,233,654</td>\n",
       "      <td>2,299,254</td>\n",
       "      <td>1,252,401</td>\n",
       "      <td>2,573,165</td>\n",
       "      <td>7,165,894</td>\n",
       "      <td>3,716,166</td>\n",
       "      <td>0.518591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>638,017</td>\n",
       "      <td>1,086,617</td>\n",
       "      <td>647,744</td>\n",
       "      <td>1,069,468</td>\n",
       "      <td>684,872</td>\n",
       "      <td>1,130,635</td>\n",
       "      <td>3,286,720</td>\n",
       "      <td>1,970,633</td>\n",
       "      <td>0.599574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>5,011,781</td>\n",
       "      <td>13,561,900</td>\n",
       "      <td>4,839,958</td>\n",
       "      <td>13,038,547</td>\n",
       "      <td>4,483,810</td>\n",
       "      <td>14,181,595</td>\n",
       "      <td>40,782,042</td>\n",
       "      <td>14,335,549</td>\n",
       "      <td>0.351516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>1,073,629</td>\n",
       "      <td>2,401,462</td>\n",
       "      <td>1,185,243</td>\n",
       "      <td>2,569,518</td>\n",
       "      <td>1,202,484</td>\n",
       "      <td>2,780,247</td>\n",
       "      <td>7,751,227</td>\n",
       "      <td>3,461,356</td>\n",
       "      <td>0.446556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>629,428</td>\n",
       "      <td>1,646,797</td>\n",
       "      <td>634,892</td>\n",
       "      <td>1,558,960</td>\n",
       "      <td>673,215</td>\n",
       "      <td>1,644,920</td>\n",
       "      <td>4,850,677</td>\n",
       "      <td>1,937,535</td>\n",
       "      <td>0.399436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>152,374</td>\n",
       "      <td>412,412</td>\n",
       "      <td>165,484</td>\n",
       "      <td>413,921</td>\n",
       "      <td>185,127</td>\n",
       "      <td>443,814</td>\n",
       "      <td>1,270,147</td>\n",
       "      <td>502,985</td>\n",
       "      <td>0.396005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DistrictofColumbia</td>\n",
       "      <td>17,367</td>\n",
       "      <td>265,853</td>\n",
       "      <td>21,381</td>\n",
       "      <td>293,764</td>\n",
       "      <td>12,723</td>\n",
       "      <td>311,268</td>\n",
       "      <td>870,885</td>\n",
       "      <td>51,471</td>\n",
       "      <td>0.059102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Florida</td>\n",
       "      <td>4,045,624</td>\n",
       "      <td>8,390,744</td>\n",
       "      <td>4,163,447</td>\n",
       "      <td>8,474,179</td>\n",
       "      <td>4,617,886</td>\n",
       "      <td>9,420,039</td>\n",
       "      <td>26,284,962</td>\n",
       "      <td>12,826,957</td>\n",
       "      <td>0.487996</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                state Republican Votes 2008 Total Number of Voters 2008  \\\n",
       "0             Alabama             1,266,546                   2,099,819   \n",
       "1              Alaska               193,841                     326,197   \n",
       "2             Arizona             1,230,111                   2,293,475   \n",
       "3            Arkansas               638,017                   1,086,617   \n",
       "4          California             5,011,781                  13,561,900   \n",
       "5            Colorado             1,073,629                   2,401,462   \n",
       "6         Connecticut               629,428                   1,646,797   \n",
       "7            Delaware               152,374                     412,412   \n",
       "8  DistrictofColumbia                17,367                     265,853   \n",
       "9             Florida             4,045,624                   8,390,744   \n",
       "\n",
       "  Republican Votes 2012 Total Number of Voters 2012 Republican Votes 2016  \\\n",
       "0             1,255,925                   2,074,338             1,318,255   \n",
       "1               164,676                     300,495               163,387   \n",
       "2             1,233,654                   2,299,254             1,252,401   \n",
       "3               647,744                   1,069,468               684,872   \n",
       "4             4,839,958                  13,038,547             4,483,810   \n",
       "5             1,185,243                   2,569,518             1,202,484   \n",
       "6               634,892                   1,558,960               673,215   \n",
       "7               165,484                     413,921               185,127   \n",
       "8                21,381                     293,764                12,723   \n",
       "9             4,163,447                   8,474,179             4,617,886   \n",
       "\n",
       "  Total Number of Voters 2016 Total_Number_of_Voters Republican_Votes  \\\n",
       "0                   2,123,372              6,297,529        3,840,726   \n",
       "1                     318,608                945,300          521,904   \n",
       "2                   2,573,165              7,165,894        3,716,166   \n",
       "3                   1,130,635              3,286,720        1,970,633   \n",
       "4                  14,181,595             40,782,042       14,335,549   \n",
       "5                   2,780,247              7,751,227        3,461,356   \n",
       "6                   1,644,920              4,850,677        1,937,535   \n",
       "7                     443,814              1,270,147          502,985   \n",
       "8                     311,268                870,885           51,471   \n",
       "9                   9,420,039             26,284,962       12,826,957   \n",
       "\n",
       "   Republican_Percentage_2008_2016  \n",
       "0                         0.609878  \n",
       "1                         0.552104  \n",
       "2                         0.518591  \n",
       "3                         0.599574  \n",
       "4                         0.351516  \n",
       "5                         0.446556  \n",
       "6                         0.399436  \n",
       "7                         0.396005  \n",
       "8                         0.059102  \n",
       "9                         0.487996  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q17 = '''SELECT * FROM republicans_per_state LIMIT 10;'''\n",
    "\n",
    "run_query(q17)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "c23 = '''DROP TABLE IF EXISTS republicans_per_state_pk;'''\n",
    "c24 = '''DROP TABLE IF EXISTS full_table_2015_2019_pk;'''\n",
    "\n",
    "run_command(c23)\n",
    "run_command(c24)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "# recreating the tables to set state as primary key\n",
    "\n",
    "\n",
    "c17 = '''CREATE TABLE republicans_per_state_pk(\n",
    "            state TEXT PRIMARY KEY,\n",
    "            republican_percentage REAL\n",
    "            );\n",
    "'''\n",
    "\n",
    "c18 = '''CREATE TABLE full_table_2015_2019_pk(\n",
    "            state TEXT PRIMARY KEY,\n",
    "            party TEXT,\n",
    "            attacks INTEGER,\n",
    "            fatalities INTEGER,\n",
    "            injured INTEGER,\n",
    "            total_victims INTEGER\n",
    "            );\n",
    "'''\n",
    "\n",
    "\n",
    "c19 = '''\n",
    "    INSERT OR REPLACE INTO republicans_per_state_pk\n",
    "    SELECT\n",
    "        state, \n",
    "        Republican_Percentage_2008_2016\n",
    "    FROM republicans_per_state;\n",
    "    '''\n",
    "\n",
    "\n",
    "c20 = '''\n",
    "    INSERT OR REPLACE INTO full_table_2015_2019_pk\n",
    "    SELECT\n",
    "        state, \n",
    "        party,\n",
    "        attacks,\n",
    "        Fatalities,\n",
    "        injured,\n",
    "        total_victims\n",
    "        FROM full_table_2015_2019;\n",
    "    '''\n",
    "\n",
    "\n",
    "c21 = '''DROP TABLE IF EXISTS republicans_per_state;'''\n",
    "c22 = '''DROP TABLE IF EXISTS full_table_2015_2019;'''\n",
    "\n",
    "\n",
    "\n",
    "run_command(c17)\n",
    "run_command(c18)\n",
    "run_command(c19)\n",
    "run_command(c20)\n",
    "run_command(c21)\n",
    "run_command(c22)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>party</th>\n",
       "      <th>republican_percentage</th>\n",
       "      <th>attacks</th>\n",
       "      <th>fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.609878</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>156</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.552104</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.518591</td>\n",
       "      <td>17</td>\n",
       "      <td>35</td>\n",
       "      <td>51</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.599574</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>74</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0.351516</td>\n",
       "      <td>126</td>\n",
       "      <td>162</td>\n",
       "      <td>537</td>\n",
       "      <td>699</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state       party  republican_percentage  attacks  fatalities  \\\n",
       "0     Alabama  Republican               0.609878       40          40   \n",
       "1      Alaska  Republican               0.552104        0           0   \n",
       "2     Arizona  Republican               0.518591       17          35   \n",
       "3    Arkansas  Republican               0.599574       15          14   \n",
       "4  California  Democratic               0.351516      126         162   \n",
       "\n",
       "   injured  total_victims  \n",
       "0      156            196  \n",
       "1        0              0  \n",
       "2       51             86  \n",
       "3       74             88  \n",
       "4      537            699  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# combining the tables and convert into pandas dataframe\n",
    "\n",
    "\n",
    "q18 = '''\n",
    "        SELECT \n",
    "            ft.state, \n",
    "            ft.party,\n",
    "            rps.republican_percentage,\n",
    "            ft.attacks, \n",
    "            ft.fatalities, \n",
    "            ft.injured, \n",
    "            ft.total_victims\n",
    "        FROM full_table_2015_2019_pk ft\n",
    "        LEFT JOIN republicans_per_state_pk rps ON ft.state = rps.state;\n",
    "'''\n",
    "\n",
    "republican_per_att_state = run_query(q18)\n",
    "\n",
    "\n",
    "republican_per_att_state.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot number of attacks per percrntage of republican voters\n",
    "\n",
    "republican_per_att_state\n",
    "\n",
    "x = republican_per_att_state['republican_percentage']\n",
    "y = republican_per_att_state['attacks']\n",
    "\n",
    "plt.scatter(x, y, alpha=0.5, s=30)\n",
    "plt.title('No. of Attacks per Percrntage of Republican Voters', y=1.1)\n",
    "plt.ylabel('No. of Attacks')\n",
    "plt.xlabel('Prcentage of Republicans')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot number of victims per percentage of republican voters\n",
    "republican_per_att_state\n",
    "\n",
    "x = republican_per_att_state['republican_percentage']\n",
    "y = republican_per_att_state['total_victims']\n",
    "\n",
    "plt.scatter(x, y, alpha=0.5, s=30)\n",
    "plt.title('No. of Mass Shooting Victims per Percentage \\nof Republican Voters', y=1.1)\n",
    "plt.ylabel('Mass Shooting Victims')\n",
    "plt.xlabel('Prcentage of Republicans')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>party</th>\n",
       "      <th>republican_percentage</th>\n",
       "      <th>attacks</th>\n",
       "      <th>fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DistrictofColumbia</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0.059102</td>\n",
       "      <td>17</td>\n",
       "      <td>6</td>\n",
       "      <td>72</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Hawaii</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0.281223</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 state       party  republican_percentage  attacks  \\\n",
       "8   DistrictofColumbia  Democratic               0.059102       17   \n",
       "11              Hawaii  Democratic               0.281223        0   \n",
       "\n",
       "    fatalities  injured  total_victims  \n",
       "8            6       72             78  \n",
       "11           0        0              0  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "republican_per_att_state[republican_per_att_state['republican_percentage'] <= 0.3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The majority of US states have experienced less than 50 mass shooting attacks since 2015, there is not a significant difference in number of attacks between states with high rate of republican voters and states with low rate of republican voters.  <br> \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Relativity - Chang 'Number of attacks' to 'Attacks per 100K Residents' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Population_estimate_2018</th>\n",
       "      <th>Percent_of_total_US_population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>4,887,871</td>\n",
       "      <td>1.48%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>737,438</td>\n",
       "      <td>0.22%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>7,171,646</td>\n",
       "      <td>2.17%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>3,013,825</td>\n",
       "      <td>0.91%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>39,559,045</td>\n",
       "      <td>11.96%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        State Population_estimate_2018 Percent_of_total_US_population\n",
       "0     Alabama                4,887,871                          1.48%\n",
       "1      Alaska                  737,438                          0.22%\n",
       "2     Arizona                7,171,646                          2.17%\n",
       "3    Arkansas                3,013,825                          0.91%\n",
       "4  California               39,559,045                         11.96%"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# upload a file with population per state\n",
    "\n",
    "pop_sate = pd.read_csv('/Users/shiralavi/Desktop/data_analysis/Projects/DBs/us_state_population.csv')\n",
    "pop_sate.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "pop_sate['Population_estimate_2018'].replace(regex=True,inplace=True,to_replace=r',',value=r'')\n",
    "pop_sate['Population_estimate_2018'] = pop_sate['Population_estimate_2018'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State                             object\n",
       "Population_estimate_2018           int64\n",
       "Percent_of_total_US_population    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pop_sate.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert dataframe to sqlite to combine tables\n",
    "\n",
    "tables['republican_per_att_state'] = republican_per_att_state\n",
    "tables['pop_sate'] = pop_sate\n",
    "\n",
    "with sqlite3.connect(db) as conn:    \n",
    "    for name, data in tables.items():\n",
    "        conn.execute(\"DROP TABLE IF EXISTS {};\".format(name))\n",
    "        data.to_sql(name,conn,index=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Population_estimate_2018</th>\n",
       "      <th>Percent_of_total_US_population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>4887871</td>\n",
       "      <td>1.48%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>737438</td>\n",
       "      <td>0.22%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>7171646</td>\n",
       "      <td>2.17%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>3013825</td>\n",
       "      <td>0.91%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>39559045</td>\n",
       "      <td>11.96%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>5695564</td>\n",
       "      <td>1.72%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>3572665</td>\n",
       "      <td>1.08%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>967171</td>\n",
       "      <td>0.29%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DistrictofColumbia</td>\n",
       "      <td>702455</td>\n",
       "      <td>0.21%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Florida</td>\n",
       "      <td>21299325</td>\n",
       "      <td>6.44%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                State  Population_estimate_2018 Percent_of_total_US_population\n",
       "0             Alabama                   4887871                          1.48%\n",
       "1              Alaska                    737438                          0.22%\n",
       "2             Arizona                   7171646                          2.17%\n",
       "3            Arkansas                   3013825                          0.91%\n",
       "4          California                  39559045                         11.96%\n",
       "5            Colorado                   5695564                          1.72%\n",
       "6         Connecticut                   3572665                          1.08%\n",
       "7            Delaware                    967171                          0.29%\n",
       "8  DistrictofColumbia                    702455                          0.21%\n",
       "9             Florida                  21299325                          6.44%"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q19 = '''SELECT * FROM republican_per_att_state LIMIT 10;'''\n",
    "\n",
    "run_query(q19)\n",
    "q20 = '''SELECT * FROM pop_sate LIMIT 10;'''\n",
    "\n",
    "run_query(q20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "# recreating the tables to set state as primary key\n",
    "\n",
    "\n",
    "c23 = '''CREATE TABLE republican_per_att_state_pk(\n",
    "            state TEXT PRIMARY KEY,\n",
    "            party TEXT,\n",
    "            republican_percentage REAL,\n",
    "            attacks INTEGER,\n",
    "            fatalities INTEGER,\n",
    "            injured INTEGER,\n",
    "            total_victims INTEGER\n",
    "            );\n",
    "'''\n",
    "\n",
    "\n",
    "c24 = '''CREATE TABLE pop_sate_PK(\n",
    "            state TEXT PRIMARY KEY,\n",
    "            population INTEGER\n",
    "            );\n",
    "'''\n",
    "\n",
    "\n",
    "c25 = '''\n",
    "    INSERT OR REPLACE INTO republican_per_att_state_pk\n",
    "    SELECT\n",
    "        state,\n",
    "        party,\n",
    "        republican_percentage,\n",
    "        attacks,\n",
    "        fatalities,\n",
    "        injured,\n",
    "        total_victims\n",
    "    FROM republican_per_att_state;\n",
    "    '''\n",
    "\n",
    "\n",
    "c26 = '''\n",
    "    INSERT OR REPLACE INTO pop_sate_PK\n",
    "    SELECT\n",
    "        state, \n",
    "        Population_estimate_2018 AS population\n",
    "    FROM pop_sate;\n",
    "    '''\n",
    "\n",
    "\n",
    "c27 = '''DROP TABLE IF EXISTS pop_sate;'''\n",
    "c28 = '''DROP TABLE IF EXISTS republican_per_att_state;'''\n",
    "\n",
    "\n",
    "\n",
    "run_command(c23)\n",
    "run_command(c24)\n",
    "run_command(c25)\n",
    "run_command(c26)\n",
    "run_command(c27)\n",
    "run_command(c28)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>population</th>\n",
       "      <th>party</th>\n",
       "      <th>republican_percentage</th>\n",
       "      <th>attacks</th>\n",
       "      <th>fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>4887871</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.609878</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>156</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>737438</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.552104</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>7171646</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.518591</td>\n",
       "      <td>17</td>\n",
       "      <td>35</td>\n",
       "      <td>51</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>3013825</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.599574</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>74</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>39559045</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0.351516</td>\n",
       "      <td>126</td>\n",
       "      <td>162</td>\n",
       "      <td>537</td>\n",
       "      <td>699</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state  population       party  republican_percentage  attacks  \\\n",
       "0     Alabama     4887871  Republican               0.609878       40   \n",
       "1      Alaska      737438  Republican               0.552104        0   \n",
       "2     Arizona     7171646  Republican               0.518591       17   \n",
       "3    Arkansas     3013825  Republican               0.599574       15   \n",
       "4  California    39559045  Democratic               0.351516      126   \n",
       "\n",
       "   fatalities  injured  total_victims  \n",
       "0          40      156            196  \n",
       "1           0        0              0  \n",
       "2          35       51             86  \n",
       "3          14       74             88  \n",
       "4         162      537            699  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# combine the tables and convert into pandas dataframe\n",
    "\n",
    "\n",
    "q21 = '''\n",
    "        SELECT\n",
    "            rpa.state,\n",
    "            ps.population,\n",
    "            rpa.party,\n",
    "            rpa.republican_percentage,\n",
    "            rpa.attacks,\n",
    "            rpa.fatalities,\n",
    "            rpa.injured,\n",
    "            rpa.total_victims\n",
    "        FROM republican_per_att_state_pk rpa\n",
    "        LEFT JOIN pop_sate_PK ps ON ps.state = rpa.state;\n",
    "'''\n",
    "\n",
    "republican_per_att_state_pop = run_query(q21)\n",
    "\n",
    "\n",
    "republican_per_att_state_pop.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "republican_per_att_state_pop['attack_per_pop'] = (republican_per_att_state_pop['attacks'] / republican_per_att_state_pop['population'])*100000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>population</th>\n",
       "      <th>party</th>\n",
       "      <th>republican_percentage</th>\n",
       "      <th>attacks</th>\n",
       "      <th>fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "      <th>attack_per_pop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>4887871</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.609878</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>156</td>\n",
       "      <td>196</td>\n",
       "      <td>0.818352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>737438</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.552104</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>7171646</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.518591</td>\n",
       "      <td>17</td>\n",
       "      <td>35</td>\n",
       "      <td>51</td>\n",
       "      <td>86</td>\n",
       "      <td>0.237045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>3013825</td>\n",
       "      <td>Republican</td>\n",
       "      <td>0.599574</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>74</td>\n",
       "      <td>88</td>\n",
       "      <td>0.497706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>39559045</td>\n",
       "      <td>Democratic</td>\n",
       "      <td>0.351516</td>\n",
       "      <td>126</td>\n",
       "      <td>162</td>\n",
       "      <td>537</td>\n",
       "      <td>699</td>\n",
       "      <td>0.318511</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state  population       party  republican_percentage  attacks  \\\n",
       "0     Alabama     4887871  Republican               0.609878       40   \n",
       "1      Alaska      737438  Republican               0.552104        0   \n",
       "2     Arizona     7171646  Republican               0.518591       17   \n",
       "3    Arkansas     3013825  Republican               0.599574       15   \n",
       "4  California    39559045  Democratic               0.351516      126   \n",
       "\n",
       "   fatalities  injured  total_victims  attack_per_pop  \n",
       "0          40      156            196        0.818352  \n",
       "1           0        0              0        0.000000  \n",
       "2          35       51             86        0.237045  \n",
       "3          14       74             88        0.497706  \n",
       "4         162      537            699        0.318511  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "republican_per_att_state_pop.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot number of attacks per 100k residents for each state\n",
    "\n",
    "att_per_100k = republican_per_att_state_pop[['state', 'attack_per_pop']]\n",
    "att_per_100k = att_per_100k.set_index('state')\n",
    "att_per_100k = att_per_100k.sort_values('attack_per_pop', ascending=False)\n",
    "\n",
    "plt.style.use('fivethirtyeight')\n",
    "\n",
    "att_per_100k.plot.bar(align = 'center', width = 0.7, figsize=(10,7))\n",
    "plt.title('Mass Shooting Attacks per 100K residents \\nin 2015-2019', fontsize = 22)\n",
    "plt.ylim(0,2.5)\n",
    "plt.ylabel('', fontsize=18)\n",
    "plt.xlabel('')\n",
    "plt.legend().set_visible(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/shiralavi/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  after removing the cwd from sys.path.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot number of attacks per 100k vs percentage of republican voters\n",
    "\n",
    "att_per_100k_rep = republican_per_att_state_pop[['state', 'attack_per_pop', 'republican_percentage']]\n",
    "att_per_100k_rep['attack_per_pop'] = att_per_100k_rep['attack_per_pop']\n",
    "att_per_100k_rep = att_per_100k_rep.set_index('state')\n",
    "att_per_100k_rep = att_per_100k_rep.sort_values('republican_percentage', ascending=False)\n",
    "\n",
    "\n",
    "y = att_per_100k_rep['attack_per_pop']\n",
    "x = att_per_100k_rep['republican_percentage']\n",
    "\n",
    "plt.scatter(x, y, alpha=0.5, s=30)\n",
    "plt.title('No. of attacks per 100K residents \\nVS. Percentage of Republican Voters', y=1.1)\n",
    "plt.xlabel('Prcentage of Republicans')\n",
    "plt.ylabel('Attacks per 100K Residents')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correlation Coefficient"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Correlation coefficients are used to assess the strength and direction of the linear relationships between pairs of variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>population</th>\n",
       "      <th>republican_percentage</th>\n",
       "      <th>attacks</th>\n",
       "      <th>fatalities</th>\n",
       "      <th>injured</th>\n",
       "      <th>total_victims</th>\n",
       "      <th>attack_per_pop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>population</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.131966</td>\n",
       "      <td>0.858488</td>\n",
       "      <td>0.859472</td>\n",
       "      <td>0.751558</td>\n",
       "      <td>0.795957</td>\n",
       "      <td>0.052873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>republican_percentage</th>\n",
       "      <td>-0.131966</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.103389</td>\n",
       "      <td>-0.017577</td>\n",
       "      <td>-0.122838</td>\n",
       "      <td>-0.100714</td>\n",
       "      <td>-0.342717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>attacks</th>\n",
       "      <td>0.858488</td>\n",
       "      <td>-0.103389</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.883168</td>\n",
       "      <td>0.882047</td>\n",
       "      <td>0.904146</td>\n",
       "      <td>0.342117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fatalities</th>\n",
       "      <td>0.859472</td>\n",
       "      <td>-0.017577</td>\n",
       "      <td>0.883168</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.866602</td>\n",
       "      <td>0.919940</td>\n",
       "      <td>0.203711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>injured</th>\n",
       "      <td>0.751558</td>\n",
       "      <td>-0.122838</td>\n",
       "      <td>0.882047</td>\n",
       "      <td>0.866602</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.992859</td>\n",
       "      <td>0.298586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_victims</th>\n",
       "      <td>0.795957</td>\n",
       "      <td>-0.100714</td>\n",
       "      <td>0.904146</td>\n",
       "      <td>0.919940</td>\n",
       "      <td>0.992859</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.283295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>attack_per_pop</th>\n",
       "      <td>0.052873</td>\n",
       "      <td>-0.342717</td>\n",
       "      <td>0.342117</td>\n",
       "      <td>0.203711</td>\n",
       "      <td>0.298586</td>\n",
       "      <td>0.283295</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       population  republican_percentage   attacks  \\\n",
       "population               1.000000              -0.131966  0.858488   \n",
       "republican_percentage   -0.131966               1.000000 -0.103389   \n",
       "attacks                  0.858488              -0.103389  1.000000   \n",
       "fatalities               0.859472              -0.017577  0.883168   \n",
       "injured                  0.751558              -0.122838  0.882047   \n",
       "total_victims            0.795957              -0.100714  0.904146   \n",
       "attack_per_pop           0.052873              -0.342717  0.342117   \n",
       "\n",
       "                       fatalities   injured  total_victims  attack_per_pop  \n",
       "population               0.859472  0.751558       0.795957        0.052873  \n",
       "republican_percentage   -0.017577 -0.122838      -0.100714       -0.342717  \n",
       "attacks                  0.883168  0.882047       0.904146        0.342117  \n",
       "fatalities               1.000000  0.866602       0.919940        0.203711  \n",
       "injured                  0.866602  1.000000       0.992859        0.298586  \n",
       "total_victims            0.919940  0.992859       1.000000        0.283295  \n",
       "attack_per_pop           0.203711  0.298586       0.283295        1.000000  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "republican_per_att_state_pop.corr(method='pearson', min_periods=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The correlation between 'republican_percentage' and 'attack_per_pop' (attacks per 100K residents) is -0.342717.\n",
    "\n",
    "## Weak negative relationship.\n",
    "\n",
    "Having a correlation weaker than 0.5 or -0.5 indicates that the two variables are not necessarily correlated."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This project shows that 'Republican states' do not suffer more from mass shooting incidents. <br>\n",
    "My guess is that there is a stronger connection between 'Weak gun laws' and mass shooting and also 'High gun ownership' and mass shooting.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
